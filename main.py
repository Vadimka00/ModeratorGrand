import telebot
from telebot import types
from telebot import TeleBot
import sqlite3
from datetime import datetime  # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
import sys
import schedule
import time
import threading
import json
from random import choice
import requests
import logging
import re
import emoji
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os, sys
from requests.exceptions import ConnectionError, ReadTimeout
import random
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor

bot = telebot.TeleBot("6971843804:AAHe5i1mA2j5cRSrCoJnG8UyBEpxBCYjX6k")

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor(max_workers=500)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
db_paths = {
    "active_chats.db": "/app/dbs/active_chats.db",
    "ad.db": "/app/dbs/ad.db",
    "chat_data.db": "/app/dbs/chat_data.db",
    "database.db": "/app/dbs/database.db",
    "fuck.db": "/app/dbs/fuck.db",
    "good.db": "/app/dbs/good.db",
    "messages.db": "/app/dbs/messages.db",
    "rules.db": "/app/dbs/rules.db",
    "spam.db": "/app/dbs/spam.db",
}

def connect_to_db(db_name):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏"""
    if db_name in db_paths:
        conn = sqlite3.connect(db_paths[db_name])
        return conn
    else:
        raise ValueError(f"Database '{db_name}' not found in paths")

allowed_users = [1858164732, 1720624205, 547955786, 1947291534, 5808500962]
prod_users = [1858164732, 5808500962]
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON
def read_json_file(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
data = read_json_file('text_language.json')
# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö active_chats.db
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

def chat_exists(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM active_chats WHERE recipient_id = ? OR sender_id = ?''', (chat_id, chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_language(chat_id):
    conn = connect_to_db('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM users WHERE user_id=?", (chat_id,))
    language = cursor.fetchone()
    conn.close()
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'rus'
    if language is None:
        return 'en'
    else:
        return language[0]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start" - –Ω–∞—á–∞–ª–æ
@bot.message_handler(commands=['start'])
def start(message):
    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        print("–ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    print("–ß–∞—Ç ID:", chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–∞—Ç ID
    print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö active_chats.db
    if chat_exists(chat_id):
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è...")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    connection, cursor, user = initialize_database(user_id)

    if user:
        language = user[1]
        prefix = user[2]
        if prefix is None:
            send_prefix_buttons(language, chat_id)
        else:
            start_text = data['start_text'][language]['1']
            start_text += data['start_text'][language]['2']
            start_text += data['start_text'][language]['3']
            start_text += data['start_text'][language]['4']
            start_text += data['start_text'][language]['5']
            start_text += data['start_text'][language]['6']
            start_text += data['start_text'][language]['7']
            start_text += data['start_text'][language]['8']
            start_text += data['start_text'][language]['9']
            start_text += data['start_text'][language]['10']
            send_buttons(chat_id, language, start_text, user_id)
    else:
        language_text = data['language_text']['1'] + "\n\n" + data['language_text']['2']
        send_language_selection(chat_id, language_text)
        print("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    cursor.close()
    connection.close()

    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏


@bot.message_handler(func=lambda message: message.text.startswith('/start GRANDMain'), content_types=['text'])
def start_param(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö active_chats.db
    if chat_exists(chat_id):
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    connection, cursor, user = initialize_database(user_id)

    if user:
        language = user[1]
        prefix = user[2]
        if prefix is None:
            send_prefix_buttons(language, chat_id)
        else:
            start_text = data['start_text'][language]['1']
            start_text += data['start_text'][language]['2']
            start_text += data['start_text'][language]['3']
            start_text += data['start_text'][language]['4']
            start_text += data['start_text'][language]['5']
            start_text += data['start_text'][language]['6']
            start_text += data['start_text'][language]['7']
            start_text += data['start_text'][language]['8']
            start_text += data['start_text'][language]['9']
            start_text += data['start_text'][language]['10']
            send_buttons(chat_id, language, start_text, user_id)
    else:
        language_text = data['language_text']['1'] + "\n\n" + data['language_text']['2']
        send_language_selection(chat_id, language_text)
        print(f"[{datetime.now()}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")

    cursor.close()
    connection.close()


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö /start
def initialize_database(user_id):
    connection = connect_to_db('database.db')
    cursor = connection.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (user_id INTEGER PRIMARY KEY, language TEXT, prefix TEXT DEFAULT NULL)''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    return connection, cursor, user
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start" - –∫–æ–Ω–µ—Ü

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –Ω–∞—á–∞–ª–æ
def send_prefix_buttons(language, chat_id):
    prefix_text = data['prefix_text'][language]['1']
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if language == "rus":
        p_yes_button = types.KeyboardButton("–î–∞! üéâ")
        p_no_button = types.KeyboardButton("–ù–µ—Ç. üòï")
    else: 
        p_yes_button = types.KeyboardButton("Yeah! üéâ")
        p_no_button = types.KeyboardButton("Nope. üòï")
    keyboard.add(p_no_button, p_yes_button)
    bot.send_message(chat_id, prefix_text, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_user_prefix(user_id, prefix):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    connection = connect_to_db('database.db')
    cursor = connection.cursor()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET prefix = ? WHERE user_id = ?", (prefix, user_id))
        connection.commit()
        print(f"[{datetime.now()}] –ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —É ID {user_id} –í—ã–±—Ä–∞–Ω–Ω—ã–π: {prefix}")

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
        language_stats = cursor.fetchone()
        language = language_stats[0] if language_stats else None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {e}")
        language = None
    finally:
        cursor.close()
        connection.close()

    return language

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def update_chat_prefix(user_id, prefix):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    connection = connect_to_db('chat_data.db')
    cursor = connection.cursor()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ —Ç–∞–±–ª–∏—Ü–µ chats
        cursor.execute("UPDATE chats SET prefix = ? WHERE creator_id = ?", (prefix, user_id))
        connection.commit()
        print(f"–ü—Ä–µ—Ñ–∏–∫—Å –≤ —á–∞—Ç–∞—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, –æ–±–Ω–æ–≤–ª–µ–Ω: {prefix}")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ chats: {e}")
    finally:
        cursor.close()
        connection.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–î–∞! üéâ" –∏–ª–∏ "–ù–µ—Ç. üòï"
@bot.message_handler(func=lambda message: message.text in ["–î–∞! üéâ", "Yeah! üéâ", "–ù–µ—Ç. üòï", "Nope. üòï"])
def stats_button_handler(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
    if message.chat.type == "private":
        chat_id = message.chat.id
        user_id = message.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        prefix = "grand" if message.text in ["–î–∞! üéâ", "Yeah! üéâ"] else "free"

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —è–∑—ã–∫
        language = update_user_prefix(user_id, prefix)
        update_chat_prefix(user_id, prefix)

        if language:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            start_text = data['start_text'][language]['1']
            start_text += data['start_text'][language]['2']
            start_text += data['start_text'][language]['3']
            start_text += data['start_text'][language]['4']
            start_text += data['start_text'][language]['5']
            start_text += data['start_text'][language]['6']
            start_text += data['start_text'][language]['7']
            start_text += data['start_text'][language]['8']
            start_text += data['start_text'][language]['9']
            start_text += data['start_text'][language]['10']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            send_buttons(chat_id, language, start_text, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –∫–æ–Ω–µ—Ü

def send_buttons(chat_id, language, text, user_id):
    connection, cursor, user = initialize_database(chat_id)
    prefix = user[2]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    if prefix is None:
            send_prefix_buttons(language, chat_id)
    else:
        if language == 'rus':
            stats_button = types.KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")
            referrals_button = types.KeyboardButton("üíé –ù–∞–≥—Ä–∞–¥–∞")
            language_ru_button = types.KeyboardButton("üåé –Ø–∑—ã–∫")
            settings_ru_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            support_ru_button = types.KeyboardButton("üõ† –ü–æ–º–æ—â—å")
            grand_ru_button = types.KeyboardButton("üí† G-–±–æ–Ω—É—Å")
            keyboard.add(stats_button, referrals_button, language_ru_button, settings_ru_button, support_ru_button, grand_ru_button)
            if prefix == "free":
                sotrud_button = types.KeyboardButton("üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
                keyboard.add(sotrud_button)            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id in allowed_users:
                bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
                staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
                info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
                if user_id in prod_users:
                    ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                    keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
                else:
                    keyboard.add(bd_button, staff_commands_button, info_button)
            bot.send_message(chat_id, text, reply_markup=keyboard)
        elif language == 'en':
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            stats_button = types.KeyboardButton("üìä Statistics")
            referrals_button = types.KeyboardButton("üíé Rewards")
            language_en_button = types.KeyboardButton("üåé Language")
            settings_en_button = types.KeyboardButton("‚öôÔ∏è Settings")
            support_en_button = types.KeyboardButton("üõ† Support")
            grand_en_button = types.KeyboardButton("üí† G-bonus")
            keyboard.add(stats_button, referrals_button, language_en_button, settings_en_button, support_en_button, grand_en_button)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id in allowed_users:
                bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
                staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
                info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
                if user_id in prod_users:
                    ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                    keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
                else:
                    keyboard.add(bd_button, staff_commands_button, info_button)
            bot.send_message(chat_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ - –Ω–∞—á–∞–ª–æ
def send_language_selection(chat_id, language_text):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    ru_button = types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    us_button = types.KeyboardButton("üá∫üá∏ English")
    keyboard.add(ru_button, us_button)

    bot.send_message(chat_id, language_text, reply_markup=keyboard)        

@bot.message_handler(func=lambda message: message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
def stats_button_handler(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
    if message.chat.type == "private":
        chat_id = message.chat.id
        user_id = message.from_user.id
        language = "rus"
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        connection = connect_to_db('database.db')
        cursor = connection.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                        (user_id INTEGER PRIMARY KEY, language TEXT, prefix TEXT DEFAULT NULL)''')

        print(f"[{datetime.now()}] –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –æ–Ω –Ω–µ "rus", –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ "rus"
            if user[1] != 'rus':
                cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (language, user_id))
                connection.commit()
            text = data['language_text']['rus']
            print(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: rus")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            cursor.execute("INSERT INTO users (user_id, language) VALUES (?, ?)", (user_id, 'rus'))
            connection.commit()
            text = data['start_text'][language]['1']
            text += data['start_text'][language]['2']
            text += data['start_text'][language]['3']
            text += data['start_text'][language]['4']
            text += data['start_text'][language]['5']
            text += data['start_text'][language]['6']
            text += data['start_text'][language]['7']
            text += data['start_text'][language]['8']
            text += data['start_text'][language]['9']
            text += data['start_text'][language]['10']
            print(f"[{datetime.now()}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}. –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: rus")
        send_buttons(chat_id, language, text, user_id)

        cursor.close()
        connection.close()

@bot.message_handler(func=lambda message: message.text == "üá∫üá∏ English")
def stats_button_handler(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
    if message.chat.type == "private":
        chat_id = message.chat.id
        user_id = message.from_user.id
        language = "en"
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        connection = connect_to_db('database.db')
        cursor = connection.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                        (user_id INTEGER PRIMARY KEY, language TEXT, prefix TEXT DEFAULT NULL)''')

        print(f"[{datetime.now()}] –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –æ–Ω –Ω–µ "rus", –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ "rus"
            if user[1] != 'en':
                cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (language, user_id))
                connection.commit()
            text = data['language_text']['en']
            print(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: en")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            cursor.execute("INSERT INTO users (user_id, language) VALUES (?, ?)", (user_id, 'en'))
            connection.commit()
            text = data['start_text'][language]['1']
            text += data['start_text'][language]['2']
            text += data['start_text'][language]['3']
            text += data['start_text'][language]['4']
            text += data['start_text'][language]['5']
            text += data['start_text'][language]['6']
            text += data['start_text'][language]['7']
            text += data['start_text'][language]['8']
            text += data['start_text'][language]['9']
            text += data['start_text'][language]['10']
            print(f"[{datetime.now()}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}. –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: en")
        send_buttons(chat_id, language, text, user_id)
        cursor.close()
        connection.close()


@bot.message_handler(func=lambda message: message.text in ["üåé –Ø–∑—ã–∫", "üåé Language"])
def language_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            user_language = get_user_language(chat_id)
            if user_language == "en":
                text = data['language_text']['2']
            else:
                text = data['language_text']['1']
            send_language_selection(chat_id, text)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–Ø–∑—ã–∫':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username if message.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ  - –∫–æ–Ω–µ—Ü

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ STAFF-–∫–æ–º–∞–Ω–¥ - –Ω–∞—á–∞–ª–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id
def get_chat_info(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM chats WHERE chat_id=?", (chat_id,))
        rows = cursor.fetchall()
        conn.close()
        return rows
    except Exception as e:
        conn.close()
        raise e

#–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è id –ø–æ username –≤ —á–∞—Ç–µ
def get_user_by_username(username):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE user_username = ?", (username, ))
        result = cursor.fetchone()
        if result:
            return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            return None
    except Exception as e:
        print(f"Error getting user ID by username: {e}")
        return None
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø–ø
def show_user_group_buttons(chat_id):
    try:
        conn, cursor = create_connection()
        cursor.execute("SELECT DISTINCT chat_id, chat_name FROM users WHERE user_id=?", (chat_id,))
        groups = cursor.fetchall()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(types.InlineKeyboardButton("–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"all_user_stats__{chat_id}"))
        for group in groups:
            keyboard.row(types.InlineKeyboardButton(group[1], callback_data=f"groupuser_{group[0]}_{chat_id}"))
        conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        return keyboard
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{chat_id.from_user.username if chat_id.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith(('groupuser_')))
def group_stats_callback(call):
    try:
        user_id = call.data.split("_")[-1]
        chat_id = call.data.split("_")[-2]
        button_pressed = call.data
        
        current_language = get_user_language(user_id)
        language = current_language

        group_id = int(call.data.replace('groupuser_', '').split('_')[0])
        conn, cursor = create_connection()
        cursor.execute("SELECT chat_name, SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE chat_id=? AND user_id=?", (group_id, user_id))
        group_stats = cursor.fetchone()
        if group_stats:
            group_stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ <b>{group_stats[0]}</b>:\n\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{group_stats[1]}</b>\nüí† –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: <b>{group_stats[2]}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{group_stats[3]}</b>\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{group_stats[4]}</b>\n"
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_profile_to_user_groups_{user_id}")
            keyboard.add(back_button)
            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=group_stats_message, reply_markup=keyboard, parse_mode='HTML')
        else:
            bot.send_message(chat_id=call.from_user.id, text=f"–£–ø—Å! –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.üöÄ")

        conn.close()
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '{button_pressed}':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –ö–Ω–æ–ø–∫–∞: {button_pressed}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith(('all_user_stats_')))
def group_stats_callback(call):
    try:
        user_id = call.data.split("_")[-1]
        button_pressed = call.data
        
        current_language = get_user_language(user_id)
        language = current_language
        conn, cursor = create_connection()
        cursor.execute("SELECT SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE user_id=?", (user_id,))
        user_stats = cursor.fetchone()
        if user_stats:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
            total_stats_message = f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_stats[0]}</b>\nüí† –í—Å–µ–≥–æ GRAND –±–æ–Ω—É—Å–æ–≤: <b>{user_stats[1]}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{user_stats[2]}</b>\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{user_stats[3]}</b>\n"
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_profile_to_user_groups_{user_id}")
            keyboard.add(back_button)
            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=total_stats_message, reply_markup=keyboard, parse_mode='HTML')
        else:
            bot.send_message(chat_id=call.from_user.id, text=f"–£–ø—Å! –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.üöÄ")

        conn.close()
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '{button_pressed}':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –ö–Ω–æ–ø–∫–∞: {button_pressed}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith(('back_profile_to_user_groups_')))
def group_stats_callback(call):
    try:
        user_id = call.data.split("_")[-1]
        language, prefix = get_prof_info(user_id)
        chat_rows = get_creators_info(user_id)
        username = get_username_info(user_id)
        if prefix == "grand":
            prefix_text = "üí†"
        else:
            prefix_text = "‚óΩÔ∏è" 
        if language == "rus":
            language_text = "üá∑üá∫"
        else:
            language_text = "üá∫üá∏"
        if chat_rows:
            text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username} ({language_text}) ({prefix_text})\n–°–æ–∑–¥–∞—Ç–µ–ª—å:\n"
            for chat_id, chat_name in chat_rows:
                text += f"<code>{chat_id}</code> ({chat_name})\n"
        else:
            text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username} ({language_text}) ({prefix_text})"
        keyboard = show_user_group_buttons(user_id)
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        error_message = (
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_username_info(user_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_username FROM users WHERE user_id=?", (user_id,))
    username = cursor.fetchone()  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    conn.close()
    return username[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –∏ –ø—Ä–µ—Ñ–∏–∫—Å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_creators_info(user_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, chat_name FROM creators WHERE creator_id=?", (user_id,))
    creator_rows = cursor.fetchall()  # Fetch all rows
    conn.close()
    if creator_rows:
        return creator_rows
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_prof_info(user_id):
    conn = connect_to_db('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT language, prefix FROM users WHERE user_id=?", (user_id,))
    language, prefix = cursor.fetchone()  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    conn.close()
    return language, prefix  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –∏ –ø—Ä–µ—Ñ–∏–∫—Å

def null_update_users():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–∞ 0
    cursor.execute('''UPDATE users
                      SET message_count = 0,
                          bonus_count = 0,
                          word_count = 0,
                          reactions_count = 0,
                          warn_count = 0''')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.commit()
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()

def null_update_chats():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–∞ 0
    cursor.execute('''UPDATE chats
                      SET message_count = 0,
                          bonus_count = 0,
                          word_count = 0,
                          reactions_count = 0,
                          warn_count = 0''')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.commit()
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()

def null_update_creators():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–∞ 0
    cursor.execute('''UPDATE creators
                      SET message_count = 0,
                          bonus_count = 0,
                          word_count = 0,
                          reactions_count = 0,
                          warn_count = 0''')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.commit()
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /close
@bot.message_handler(commands=['update'])
def close_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        null_update_users()
        null_update_chats()
        null_update_creators()
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@bot.message_handler(commands=['support'])
def add_support_entry(message):
    if message.from_user and message.from_user.id in allowed_users:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "–ü–æ–¥—Å–∫–∞–∑–∫–∞: /support support_id @support_name")
            return

        support_id = args[1]
        support_name = args[2]

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã support, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        cursor.execute('''CREATE TABLE IF NOT EXISTS support
                        (support_id INTEGER PRIMARY KEY,
                        support_name TEXT,
                        support_balance INTEGER,
                        like INTEGER DEFAULT 0,
                        dislike INTEGER DEFAULT 0,
                        code TEXT)''')

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        code = generate_code()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        cursor.execute("INSERT INTO support (support_id, support_name, support_balance, code) VALUES (?, ?, ?, ?)", (support_id, support_name, 0, code))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        bot.send_message(support_id, f"{support_name}, –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {code}")

        bot.reply_to(message, f"{support_name} - –î–æ–±–∞–≤–ª–µ–Ω –≤ Support! –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {code}")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /close
@bot.message_handler(commands=['close'])
def close_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /close
        if len(message.text.split()) > 1:
            sender_id = message.text.split()[1]
            chat_id = sender_id
            user_id = message.from_user.id
            recipient_id = get_recipient(user_id)
            recipient_id_to = recipient_id
            sender_id_to = sender_id
            language = "rus"
            language_user = get_sender_language(sender_id)
            sender_keyboard = send_new_buttons_sender_id_to(language_user, sender_id_to)
            recipient_keyboard = send_new_buttons_sender_id_to(language, recipient_id_to)
            bot.send_message(recipient_id_to, f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç —Å {sender_id_to} ‚úÖ",reply_markup=recipient_keyboard)
            if language_user == "rus":
                bot.send_message(sender_id_to, f"üëã –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª —á–∞—Ç! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!", reply_markup=sender_keyboard)
            else:
                bot.send_message(sender_id_to, f"üëã Specialist didn't wait for your assessment and forcibly disconnected the chat! We thank you for your appeal!", reply_markup=sender_keyboard)
            increment_like_count(recipient_id)
            delete_chat(sender_id)
        else:
            bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä /close 77236482")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /police
@bot.message_handler(commands=['police'])
def handle_police_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        if len(message.text.split()) == 2:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            user_id = message.text.split()[1]

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "police"
            delete_user_from_police(user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            bot.reply_to(message, f"C ID {user_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        else:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            bot.reply_to(message, " –ò—Å–ø–æ–ª—å–∑—É–π /police user_id")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

def delete_user_from_police(user_id):
    connection = connect_to_db('chat_data.db')
    cursor = connection.cursor()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        DELETE FROM police
        WHERE sender_id = ?
    """, (user_id,))

    connection.commit()
    connection.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iuser
@bot.message_handler(commands=['iuser'])
def send_chat_info(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
            if len(message.text.split()) != 2:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - @username.')
                return
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            username = message.text.split()[1].lstrip('@')
            user_id = get_user_by_username(username)
            if user_id is None:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            language, prefix = get_prof_info(user_id)
            chat_rows = get_creators_info(user_id)
            if prefix == "grand":
                prefix_text = "üí†"
            else:
                prefix_text = "‚óΩÔ∏è" 
            if language == "rus":
                language_text = "üá∑üá∫"
            else:
                language_text = "üá∫üá∏"
            if chat_rows:
                text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username} ({language_text}) ({prefix_text})\n–°–æ–∑–¥–∞—Ç–µ–ª—å:\n"
                for chat_id, chat_name in chat_rows:
                    text += f"<code>{chat_id}</code> ({chat_name})\n"
            else:
                text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username} ({language_text}) ({prefix_text})"
            keyboard = show_user_group_buttons(user_id)
            bot.reply_to(message, text, reply_markup=keyboard, parse_mode="HTML")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –û—à–∏–±–∫–∞: {e}"
        bot.reply_to(message, error_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id
def get_chat_users(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT user_id, user_username FROM users WHERE chat_id=?", (chat_id,))
        rows = cursor.fetchall()
        conn.close()
        return rows
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatusers
@bot.message_handler(commands=['chatusers'])
def send_chat_users(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
            if len(message.text.split()) != 2:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - chat_id.')
                return
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            chat_id = message.text.split()[1]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_info = get_chat_users(chat_id)
            if user_info:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                user_list = [f"ID: <code>{user[0]}</code>(@{user[1]})" if user[1] else f"ID: <code>{user[0]}</code>" for user in user_info]
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                chunk_size = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                chunks = [user_list[i:i + chunk_size] for i in range(0, len(user_list), chunk_size)]
                for chunk in chunks:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
                    users_response = ",   ".join(chunk)
                    bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ —Å ID {chat_id}:\n{users_response}", parse_mode="HTML")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞ —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id
def get_chat_info(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM chats WHERE chat_id=?", (chat_id,))
        rows = cursor.fetchall()
        conn.close()
        return rows
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /infoB
@bot.message_handler(commands=['ichat'])
def send_chat_info(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
            if len(message.text.split()) != 2:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - chat_id.')
                return
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            chat_id = message.text.split()[1]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            chat_info = get_chat_info(chat_id)
            if chat_info:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç
                for row in chat_info:
                    if row[32] == "grand":
                        prefix = "üí†"
                    else:
                        prefix = "‚óΩÔ∏è" 
                    if row[4] == "rus":
                        language = "üá∑üá∫"
                    else:
                        language = "üá∫üá∏"
                    if row[18] == "on":
                        seton = "‚úÖ"
                    else:
                        seton = "‚ùå"
                    if row[15] == "on":
                        prof = "‚úÖ"
                    else:
                        prof = "‚ùå"
                    if row[19] == "on":
                        mat = "‚úÖ"
                    else:
                        mat = "‚ùå"
                    if row[20] == "on":
                        flood = "‚úÖ"
                    else:
                        flood = "‚ùå"
                    if row[30] == "on":
                        link = "‚úÖ"
                    else:
                        link = "‚ùå"
                    if row[17] == "on":
                        sup = "‚úÖ"
                    else:
                        sup = "‚ùå"
                    if row[13] == "on_earn":
                        earn = "‚úÖ"
                    else:
                        earn = "‚ùå"

                    response = f"<code>{row[0]}</code> ({row[1]}) ({prefix})\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{row[2]}</code> (@{row[3]})\n–Ø–∑—ã–∫: {language} üôé: {row[5]}\nüí¨: {row[6]}\nüí†: {row[7]}\nüìù: {row[8]}\n‚ö†Ô∏è: {row[10]}\nüéØ: {row[11]}\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earn}\n–ü—Ä–æ—Ñ –æ–±—â–µ–Ω–∏–µ: {prof}\n–°–ø–∞–º: {seton}\n–ú–∞—Ç: {mat}\n–§–ª—É–¥: {flood}\n–°—Å—ã–ª–∫–∏: {link}\nSUP —Ä–µ–∂–∏–º: {sup}\n–ö–æ—ç—Ñ Grand: {row[16]}\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {row[14]}"
                bot.reply_to(message, response, parse_mode="HTML")
            else:
                bot.reply_to(message, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
def update_creator_column(creator_id, chat_id, column_name, new_value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute(f"UPDATE creators SET {column_name}=? WHERE creator_id=? AND chat_id=?", (new_value, creator_id, chat_id))
        conn.commit()
        conn.close()
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upchat
@bot.message_handler(commands=['upcreator'])
def update_chat_column_handler(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if len(message.text.split()) != 5:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - creator_id, chat_id –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            creator_id = message.text.split()[1]
            chat_id = message.text.split()[2]
            column_name = message.text.split()[3]
            new_value = message.text.split()[4]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_creator_column(creator_id, chat_id, column_name, new_value)
            
            bot.reply_to(message, f"–î–ª—è {creator_id} –∏ —á–∞—Ç–∞ {chat_id} –∑–Ω–∞—á–µ–Ω–∏—è {column_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
def update_user_column(user_id, chat_id, column_name, new_value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute(f"UPDATE users SET {column_name}=? WHERE user_id=? AND chat_id=?", (new_value, user_id, chat_id))
        conn.commit()
        conn.close()
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upchat
@bot.message_handler(commands=['upuser'])
def update_chat_column_handler(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if len(message.text.split()) != 5:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - user_id, chat_id –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            user_id = message.text.split()[1]
            chat_id = message.text.split()[2]
            column_name = message.text.split()[3]
            new_value = message.text.split()[4]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_user_column(user_id, chat_id, column_name, new_value)
            
            bot.reply_to(message, f"–î–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} –∑–Ω–∞—á–µ–Ω–∏—è {column_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
def update_chat_column(chat_id, column_name, new_value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute(f"UPDATE chats SET {column_name}=? WHERE chat_id=?", (new_value, chat_id))
        conn.commit()
        conn.close()
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upchat
@bot.message_handler(commands=['upchat'])
def update_chat_column_handler(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if len(message.text.split()) != 4:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - chat_id, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            chat_id = message.text.split()[1]
            column_name = message.text.split()[2]
            new_value = message.text.split()[3]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_chat_column(chat_id, column_name, new_value)
            
            bot.reply_to(message, f"–î–ª—è {chat_id} –∑–Ω–∞—á–µ–Ω–∏—è {column_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def gift_grand(user_id, coef):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("SELECT chat_id FROM users WHERE user_id = ?", (user_id,))
        chat_ids = cursor.fetchall()
        random_chat_id = random.choice(chat_ids)[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ grand_count –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT bonus_count FROM users WHERE user_id = ? AND chat_id = ?", (user_id, random_chat_id))
        current_grand_count = cursor.fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        new_grand_count = current_grand_count + coef
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ grand_count –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ chat_id
        cursor.execute("UPDATE users SET bonus_count = ? WHERE user_id = ? AND chat_id = ?", (new_grand_count, user_id, random_chat_id))
        conn.commit()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π chat_name –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("SELECT chat_name FROM users WHERE user_id = ? AND chat_id = ?", (user_id, random_chat_id))
        chat_name = cursor.fetchone()[0]
        
        conn.close()
        
        return chat_name
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift
@bot.message_handler(commands=['gift'])
def update_chat_column_handler(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            args = message.text.split()
            if len(args) != 3:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–∞.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            username = args[1].lstrip('@')
            try:
                coef = float(args[2])
            except ValueError:
                bot.reply_to(message, '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = get_user_by_username(username)
            if user_id is None:
                bot.reply_to(message, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return
            
            language = get_user_language(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_name = gift_grand(user_id, coef)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ user_id
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                chat_name = gift_grand(user_id, coef)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
                if language == "rus":
                    text = f"–ü—Ä–∏–≤–µ—Ç! üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ GRAND TIME –≤ —Ä–∞–∑–º–µ—Ä–µ üí† {coef} G-–±–æ–Ω—É—Å–æ–≤! üåü –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ \"{chat_name}\""
                else:
                    text = f"Hello! üéÅ You have received a gift from the GRAND TIME community in the amount of üí† {coef} G-bonuses! üåü Accrual in the statistics \"{chat_name}\""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(chat_id=user_id, text=text)
                bot.reply_to(message, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ!")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. {e}")



    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
def update_coef(coef):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE chats SET grand_count = ?", (coef,))
        conn.commit()
        conn.close()
    except Exception as e:
        conn.close()
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upcoef
@bot.message_handler(commands=['upcoef'])
def update_chat_column_handler(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            args = message.text.split()
            if len(args) != 2:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–≤—ã–π –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç - —á–∏—Å–ª–æ.')
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º
            try:
                coef = float(args[1])
            except ValueError:
                bot.reply_to(message, '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_coef(coef)
            
            bot.reply_to(message, f"–ù–æ–≤—ã–π –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç {coef} –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É book
def add_to_book_en(value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO book_en (value) VALUES (?)''', (value,))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookadd
@bot.message_handler(commands=['bookadden'])
def handle_book_add_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            command, *value = message.text.split(" ")
            value = " ".join(value)
            add_to_book_en(value)
            bot.reply_to(message, f"‚úÖ '{value}'.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bookadden.")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É book
def add_to_book(value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO book (value) VALUES (?)''', (value,))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookadd
@bot.message_handler(commands=['bookadd'])
def handle_book_add_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        if len(message.text.split(maxsplit=1)) > 1:
            command, *value = message.text.split(" ")
            value = " ".join(value)
            add_to_book(value)
            bot.reply_to(message, f"‚úÖ '{value}'.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bookadd.")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã book
def remove_from_book(value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM book WHERE value = ?''', (value,))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookremove
@bot.message_handler(commands=['bookremove'])
def handle_book_remove_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            command, *value = message.text.split(" ")
            value = " ".join(value)
            remove_from_book(value)
            bot.reply_to(message, f"‚úÖ '{value}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bookremove text.")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã book
def en_remove_from_book(value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM book_en WHERE value = ?''', (value,))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookremove
@bot.message_handler(commands=['enbookremove'])
def handle_book_remove_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            command, *value = message.text.split(" ")
            value = " ".join(value)
            en_remove_from_book(value)
            bot.reply_to(message, f"‚úÖ '{value}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /enbookremove text.")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã book
def get_book_info_en():
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM book_en''')
    rows = cursor.fetchall()
    conn.close()
    return rows

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookinfo
@bot.message_handler(commands=['bookinfoen'])
def handle_book_info_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        book_info = get_book_info_en()
        if book_info:
            values = "\n\n".join([row[1] for row in book_info])
            bot.reply_to(message, f"–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏:\n\n{values}")
        else:
            bot.reply_to(message, "–ó–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã book
def get_book_info():
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM book''')
    rows = cursor.fetchall()
    conn.close()
    return rows

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bookinfo
@bot.message_handler(commands=['bookinfo'])
def handle_book_info_command(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        book_info = get_book_info()
        if book_info:
            values = "\n\n".join([row[1] for row in book_info])
            bot.reply_to(message, f"–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏:\n\n{values}")
        else:
            bot.reply_to(message, "–ó–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è!")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def remove_chat_and_creator_from_db(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM chats WHERE chat_id=?", (chat_id,))
        cursor.execute("DELETE FROM creators WHERE chat_id=?", (chat_id,))
        conn.commit()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"Deleted data for chat ID: {chat_id}")
        
        return True
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        return False
    
    finally:
        conn.close()

def remove_chat_db(chat_id):
    conn = connect_to_db('database.db')
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM chats WHERE chat_id=?", (chat_id,))
        conn.commit()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"Deleted data for chat ID: {chat_id}")
        
        return True
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        return False
    
    finally:
        conn.close()    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delchat
@bot.message_handler(commands=['delchat'])
def delete_chat_and_creator(message):
    try:
        if message.from_user and message.from_user.id in allowed_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
            if len(message.text.split()) != 2:
                bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - chat_id.')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            chat_id = message.text.split()[1]
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if remove_chat_and_creator_from_db(chat_id):
                remove_chat_db(chat_id)
                bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ —Å ID: {chat_id}")
            else:
                bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.reply_to(message, f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–±—è!")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

def delete_user(user_id):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    connection = connect_to_db('database.db')
    cursor = connection.cursor()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    connection.commit()

    cursor.close()
    connection.close()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã active_chats
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã active_chats
    cursor.execute("DELETE FROM active_chats WHERE recipient_id = ? OR sender_id = ?", (user_id, user_id))
    conn.commit()

    cursor.close()
    conn.close()

@bot.message_handler(commands=['deluser'])
def del_user(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if message.chat.type == "private":
            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            args = message.text.split()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if len(args) == 2:
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                user_id = args[1]

                delete_user(user_id)

                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π: /deluser user_id")
        else:
            bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –±–æ—Ç–æ–º.")
    else:
        bot.reply_to(message, "–î–ª—è —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /proden
@bot.message_handler(commands=['proden'])
def send_info(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if message.from_user and message.from_user.id in allowed_users:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global info_message
        info_message = message.text[8:] 
        
        keyboard = types.InlineKeyboardMarkup()
        send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_info_en")
        keyboard.add(send_button)
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–Ω–≥–ª —è–∑—ã–∫–æ–º:\n\n{info_message}"
        bot.send_message(message.chat.id, message_text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "send_info_en")
def send_info_to_users(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if call.message.chat.id in allowed_users:
        sent_count = send_info_to_en_users(info_message)
        bot.answer_callback_query(call.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–Ω–≥–ª —è–∑—ã–∫–æ–º.")
    else:
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")


def send_info_to_en_users(info_message):
    sent_count = 0
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        connection_users = connect_to_db('database.db')
        cursor_users = connection_users.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_users.execute("SELECT DISTINCT user_id, language FROM users")
        users_data = cursor_users.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_data in users_data:
            user_id, language = user_data
            try:
                if language == 'en':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    bot.send_message(user_id, text=info_message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –∞–Ω–≥–ª")
                    sent_count += 1
                elif language == 'rus':
                    pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor_users.close()
        connection_users.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    return sent_count

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prod
@bot.message_handler(commands=['prodchaten'])
def send_info(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if message.from_user and message.from_user.id in allowed_users:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global info_message
        info_message = message.text[12:] 
        
        keyboard = types.InlineKeyboardMarkup()
        send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_info_chat_en")
        keyboard.add(send_button)
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –∞–Ω–≥–ª —è–∑—ã–∫–æ–º:\n\n{info_message}"
        bot.send_message(message.chat.id, message_text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "send_info_chat_en")
def send_info_to_users(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if call.message.chat.id in allowed_users:
        sent_count = send_info_to_chats_en(info_message)
        bot.answer_callback_query(call.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –≥—Ä—É–ø–ø–∞–º —Å –∞–Ω–≥–ª —è–∑—ã–∫–æ–º.")
    else:
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")


def send_info_to_chats_en(info_message):
    sent_count = 0
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        connection_users = connect_to_db('chat_data.db')
        cursor_users = connection_users.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_users.execute("SELECT DISTINCT chat_id, language FROM chats")
        users_data = cursor_users.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_data in users_data:
            user_id, language = user_data
            try:
                if language == 'en':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    bot.send_message(user_id, text=info_message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ {user_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                    sent_count += 1
                elif language == 'rus':
                    pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor_users.close()
        connection_users.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return sent_count

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prod
@bot.message_handler(commands=['prodchat'])
def send_info(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if message.from_user and message.from_user.id in allowed_users:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global info_message
        info_message = message.text[10:] 
        
        keyboard = types.InlineKeyboardMarkup()
        send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_info_chat")
        keyboard.add(send_button)
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º:\n\n{info_message}"
        bot.send_message(message.chat.id, message_text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "send_info_chat")
def send_info_to_users(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if call.message.chat.id in allowed_users:
        sent_count = send_info_to_chats(info_message)
        bot.answer_callback_query(call.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –≥—Ä—É–ø–ø–∞–º —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º.")
    else:
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")


def send_info_to_chats(info_message):
    sent_count = 0
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        connection_users = connect_to_db('chat_data.db')
        cursor_users = connection_users.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_users.execute("SELECT DISTINCT chat_id, language FROM chats")
        users_data = cursor_users.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_data in users_data:
            user_id, language = user_data
            try:
                if language == 'rus':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    bot.send_message(user_id, text=info_message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ {user_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                    sent_count += 1
                elif language == 'en':
                    pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor_users.close()
        connection_users.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    return sent_count

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prod
@bot.message_handler(commands=['prod'])
def send_info(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if message.from_user and message.from_user.id in allowed_users:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global info_message
        info_message = message.text[6:] 
        
        keyboard = types.InlineKeyboardMarkup()
        send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_info")
        keyboard.add(send_button)
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º:\n\n{info_message}"
        bot.send_message(message.chat.id, message_text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "send_info")
def send_info_to_users(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
    if call.message.chat.id in allowed_users:
        sent_count = send_info_to_users(info_message)
        bot.answer_callback_query(call.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º.")
    else:
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")


def send_info_to_users(info_message):
    sent_count = 0
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        connection_users = connect_to_db('database.db')
        cursor_users = connection_users.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_users.execute("SELECT DISTINCT user_id, language FROM users")
        users_data = cursor_users.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_data in users_data:
            user_id, language = user_data
            try:
                if language == 'rus':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    bot.send_message(user_id, text=info_message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                    sent_count += 1
                elif language == 'en':
                    pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor_users.close()
        connection_users.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    return sent_count

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_read_spam():
    with connect_to_db('spam.db') as conn:
        try:
            c = conn.cursor()
            c.execute('SELECT COUNT(keyword) FROM keywords')
            result = c.fetchone()
            return result[0] > 0
        except sqlite3.Error as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return False

@bot.message_handler(commands=['rspam'])
def read_good_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        if is_keyword_read_spam():
            with connect_to_db('spam.db') as conn:
                try:
                    c = conn.cursor()
                    c.execute('SELECT keyword FROM keywords')
                    results = c.fetchall()
                    reply_message = "–ó–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                    for result in results:
                        reply_message += f"{result[0]},   "
                    bot.reply_to(message, reply_message)
                except sqlite3.Error as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_exists(keyword):
    conn = connect_to_db('spam.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM keywords WHERE keyword=?', (keyword,))
    result = c.fetchone()[0]
    conn.close()
    return result > 0

## –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /wspam
@bot.message_handler(commands=['wspam'])
def write_spam_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyword_phrases = message.text.split(maxsplit=1)[1]
            keyword_phrases = keyword_phrases.split(',')  
            reply_message = ""
            for keyword_phrase in keyword_phrases:
                keyword_phrase = keyword_phrase.strip().lower()  
                if not is_keyword_exists(keyword_phrase):
                    add_spam_keyword(keyword_phrase)
                    reply_message += f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {keyword_phrase}\n"
                else:
                    reply_message += f"\n\n–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {keyword_phrase}\n"
            bot.reply_to(message, reply_message.strip())
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /wspam.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_fuck_keyword(keyword_phrase):
    conn = connect_to_db('fuck.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO keywords (keyword) VALUES (?)', (keyword_phrase,))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_read_fuck():
    with connect_to_db('fuck.db') as conn:
        try:
            c = conn.cursor()
            c.execute('SELECT COUNT(keyword) FROM keywords')
            result = c.fetchone()
            return result[0] > 0
        except sqlite3.Error as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return False

@bot.message_handler(commands=['rfuck'])
def read_good_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        if is_keyword_read_fuck():
            with connect_to_db('fuck.db') as conn:
                try:
                    c = conn.cursor()
                    c.execute('SELECT keyword FROM keywords')
                    results = c.fetchall()
                    reply_message = "–ó–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                    for result in results:
                        reply_message += f"{result[0]},   "
                    bot.reply_to(message, reply_message)
                except sqlite3.Error as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_fuck(keyword):
    conn = connect_to_db('fuck.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM keywords WHERE keyword=?', (keyword,))
    result = c.fetchone()[0]
    conn.close()
    return result > 0

## –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /wfuck
@bot.message_handler(commands=['wfuck'])
def write_spam_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyword_phrases = message.text.split(maxsplit=1)[1]
            keyword_phrases = keyword_phrases.split(',')  
            reply_message = ""
            for keyword_phrase in keyword_phrases:
                keyword_phrase = keyword_phrase.strip().lower()  
                if not is_keyword_fuck(keyword_phrase):
                    add_fuck_keyword(keyword_phrase)
                    reply_message += f"‚úÖ: {keyword_phrase}\n"
                else:
                    reply_message += f"\n‚ÅâÔ∏è: {keyword_phrase}\n"
            bot.reply_to(message, reply_message.strip())
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /wfuck.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_good_keyword(keyword_phrase):
    conn = connect_to_db('good.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO keywords (keyword) VALUES (?)', (keyword_phrase,))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_good(keyword):
    conn = connect_to_db('good.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM keywords WHERE keyword=?', (keyword,))
    result = c.fetchone()[0]
    conn.close()
    return result > 0

@bot.message_handler(commands=['wgood'])
def write_spam_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if len(message.text.split(maxsplit=1)) > 1:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyword_phrases = message.text.split(maxsplit=1)[1]
            keyword_phrases = keyword_phrases.split(',')  
            reply_message = ""
            for keyword_phrase in keyword_phrases:
                keyword_phrase = keyword_phrase.strip().lower()  
                if not is_keyword_good(keyword_phrase):
                    add_good_keyword(keyword_phrase)
                    reply_message += f"‚úÖ: {keyword_phrase}\n"
                else:
                    reply_message += f"\n‚ÅâÔ∏è: {keyword_phrase}\n"
            bot.reply_to(message, reply_message.strip())
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /wgood.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_keyword_read_good():
    with connect_to_db('good.db') as conn:
        try:
            c = conn.cursor()
            c.execute('SELECT COUNT(keyword) FROM keywords')
            result = c.fetchone()
            return result[0] > 0
        except sqlite3.Error as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return False

@bot.message_handler(commands=['rgood'])
def read_good_keywords(message):
    if message.from_user and message.from_user.id in allowed_users:
        if is_keyword_read_good():
            with connect_to_db('good.db') as conn:
                try:
                    c = conn.cursor()
                    c.execute('SELECT keyword FROM keywords')
                    results = c.fetchall()
                    reply_message = "–ó–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                    for result in results:
                        reply_message += f"{result[0]},   "
                    bot.reply_to(message, reply_message)
                except sqlite3.Error as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ STAFF –∫–æ–º–∞–Ω–¥ - –∫–æ–Ω–µ—Ü

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ STAFF –∫–Ω–æ–ø–∫–∏ –±–∞–∑–∞ - –Ω–∞—á–∞–ª–æ
def create_keyboard_staff():
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    users_button = types.KeyboardButton(f"üôé")
    chats_button = types.KeyboardButton(f"üóÇ")
    back_button = types.KeyboardButton(f"‚¨ÖÔ∏è")
    keyboard.add(users_button, chats_button, back_button)
    return keyboard


@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è')
def back_handler(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    language = "rus"
    text = data["leave_base_text"]
    send_buttons(chat_id, language, text, user_id)


@bot.message_handler(func=lambda message: message.text == f'üôé')
def users_handler(message):
    if message.from_user.id in allowed_users:
        connection_users = connect_to_db('database.db')
        cursor_users = connection_users.cursor()

        try:
            cursor_users.execute("SELECT user_id, language, prefix FROM users WHERE language=?", ("rus",))
            rus_users_info = cursor_users.fetchall()

            cursor_users.execute("SELECT user_id, language, prefix FROM users WHERE language=?", ("en",))
            en_users_info = cursor_users.fetchall()

            def format_users_info(users_info):
                users_info_text = ""
                for user_info in users_info:
                    user_id, language, prefix = user_info
                    if language == "rus":
                        lang_text = "üá∑üá∫"
                    else:
                        lang_text = "üá∫üá∏"
                    if prefix == "grand":
                        pref_text = "üí†"
                    elif prefix == "free":
                        pref_text = "üü©"
                    else:
                        pref_text = "‚óΩÔ∏è"
                    users_info_text += f"[<code>{user_id}</code> {lang_text} {pref_text}]   "
                return users_info_text.strip()
            rus_users_info_text = format_users_info(rus_users_info)
            if len(rus_users_info_text) <= 4096:
                bot.send_message(message.chat.id, rus_users_info_text, parse_mode="HTML")
            else:
                bot.send_message(message.chat.id, rus_users_info_text[:4096], parse_mode="HTML")
                bot.send_message(message.chat.id, rus_users_info_text[4096:], parse_mode="HTML")

            en_users_info_text = format_users_info(en_users_info)
            if len(en_users_info_text) <= 4096:
                bot.send_message(message.chat.id, en_users_info_text, parse_mode="HTML")
            else:
                bot.send_message(message.chat.id, en_users_info_text[:4096], parse_mode="HTML")
                bot.send_message(message.chat.id, en_users_info_text[4096:], parse_mode="HTML")

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

        finally:
            cursor_users.close()
            connection_users.close()
    else:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")        


@bot.message_handler(func=lambda message: message.text == f'üóÇ')
def chats_handler(message):
    if message.from_user.id in allowed_users:
        connection_chats = connect_to_db('chat_data.db')
        cursor_chats = connection_chats.cursor()

        try:
            cursor_chats.execute("SELECT chat_id, language, prefix, bonus_count, grand_count FROM chats WHERE language=?", ("rus",))
            rus_chats_info = cursor_chats.fetchall()

            cursor_chats.execute("SELECT chat_id, language, prefix, bonus_count, grand_count FROM chats WHERE language=?", ("en",))
            en_chats_info = cursor_chats.fetchall()

            def format_chats_info(chats_info):
                chats_info_text = ""
                for chat_info in chats_info:
                    chat_id, language, prefix, bonus_count, grand_count = chat_info
                    if language == "rus":
                        lang_text = "üá∑üá∫"
                    else:
                        lang_text = "üá∫üá∏"
                    if prefix == "grand":
                        pref_text = "üí†"
                    elif prefix == "free":
                        pref_text = "üü©"
                    else:
                        pref_text = "‚óΩÔ∏è"
                    chats_info_text += f"[<code>{chat_id}</code> {lang_text} {pref_text} {round(bonus_count, 2)} ({grand_count})]\n"
                return chats_info_text
            
            rus_chats_info_text = format_chats_info(rus_chats_info)
            if len(rus_chats_info_text) <= 4096:
                bot.send_message(message.chat.id, rus_chats_info_text, parse_mode="HTML")
            else:
                bot.send_message(message.chat.id, rus_chats_info_text[:4096], parse_mode="HTML")
                bot.send_message(message.chat.id, rus_chats_info_text[4096:], parse_mode="HTML")

            en_chats_info_text = format_chats_info(en_chats_info)
            if len(en_chats_info_text) <= 4096:
                bot.send_message(message.chat.id, en_chats_info_text, parse_mode="HTML")
            else:
                bot.send_message(message.chat.id, en_chats_info_text[:4096], parse_mode="HTML")
                bot.send_message(message.chat.id, en_chats_info_text[4096:], parse_mode="HTML")

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–æ–≤: {e}")

        finally:
            cursor_chats.close()
            connection_chats.close()


@bot.message_handler(func=lambda message: message.text == 'üåê –ë–∞–∑–∞')
def base_handler(message):
    try:
        if message.from_user.id in allowed_users:
            connection_users = connect_to_db('database.db')
            cursor_users = connection_users.cursor()

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor_users.execute("SELECT COUNT(*) FROM users")
                total_users_count = cursor_users.fetchone()[0]

            except sqlite3.Error as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

            cursor_users.close()
            connection_users.close()

            connection_chats = connect_to_db('chat_data.db')
            cursor_chats = connection_chats.cursor()

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
                cursor_chats.execute("SELECT COUNT(*) FROM chats")
                total_chats_count = cursor_chats.fetchone()[0]

                users_info_chunk = f"–í—ã–±–µ—Ä–∏ –±–∞–∑—É:\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users_count}\n–ö–æ–ª-–≤–æ –≥—Ä—É–ø–ø: {total_chats_count}"
                staff = create_keyboard_staff()
                bot.send_message(message.chat.id, users_info_chunk, reply_markup=staff,parse_mode="HTML")
            except sqlite3.Error as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–æ–≤: {e}")

            cursor_chats.close()
            connection_chats.close()
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üåê –ë–∞–∑–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Username: @{message.from_user.username if message.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        logging.error(error_message)

@bot.message_handler(func=lambda message: message.text == 'üìù –ö–æ–º–∞–Ω–¥—ã')
def back_handler(message):
    if message.from_user.id in allowed_users:
        text = data["staff_commands"]["prod"]
        text += data["staff_commands"]["proden"]
        text += data["staff_commands"]["prodchat"]
        text += data["staff_commands"]["prodchaten"]
        text += data["staff_commands"]["police"]
        text += data["staff_commands"]["close"]
        text += data["staff_commands"]["support"]
        text += data["staff_commands"]["gift"]
        text += data["staff_commands"]["iuser"]
        text += data["staff_commands"]["ichat"]
        text += data["staff_commands"]["chatusers"]
        text += data["staff_commands"]["upcoef"]
        text += data["staff_commands"]["upchat"]
        text += data["staff_commands"]["upcreator"]
        text += data["staff_commands"]["upuser"]
        text += data["staff_commands"]["bookinfo"]
        text += data["staff_commands"]["bookinfoen"]
        text += data["staff_commands"]["bookadd"]
        text += data["staff_commands"]["bookadden"]
        text += data["staff_commands"]["bookremove"]
        text += data["staff_commands"]["enbookremove"]
        text += data["staff_commands"]["delchat"]
        text += data["staff_commands"]["deluser"]
        text += data["staff_commands"]["wspam"]
        text += data["staff_commands"]["rspam"]
        text += data["staff_commands"]["wfuck"]
        text += data["staff_commands"]["rfuck"]
        text += data["staff_commands"]["wgood"]
        text += data["staff_commands"]["rgood"]
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

@bot.message_handler(func=lambda message: message.text == 'üëÅ‚Äçüó® Info')
def back_handler(message):
    if message.from_user.id in allowed_users:
        chats = data["staff_column"]["chat"]["chats"]
        chats += data["staff_column"]["chat"]["chat_id"]
        chats += data["staff_column"]["chat"]["chat_name"]
        chats += data["staff_column"]["chat"]["creator_id"]
        chats += data["staff_column"]["chat"]["creator_username"]
        chats += data["staff_column"]["chat"]["language"]
        chats += data["staff_column"]["chat"]["active_users"]
        chats += data["staff_column"]["chat"]["bonus_count"]
        chats += data["staff_column"]["chat"]["level_count"]
        chats += data["staff_column"]["chat"]["grand_count"]
        chats += data["staff_column"]["chat"]["earn"]
        chats += data["staff_column"]["chat"]["hi_text"]
        chats += data["staff_column"]["chat"]["good_text"]
        chats += data["staff_column"]["chat"]["spam"]
        chats += data["staff_column"]["chat"]["fuck"]
        chats += data["staff_column"]["chat"]["flood"]
        chats += data["staff_column"]["chat"]["link"]
        chats += data["staff_column"]["chat"]["prefix"]
        chats += data["staff_column"]["chat"]["support"]
        bot.send_message(message.chat.id, chats, parse_mode="HTML")
        creators = data["staff_column"]["creator"]["creators"]
        creators += data["staff_column"]["creator"]["creator_id"]
        creators += data["staff_column"]["creator"]["creator_username"]
        creators += data["staff_column"]["creator"]["chat_id"]
        creators += data["staff_column"]["creator"]["chat_name"]
        creators += data["staff_column"]["creator"]["language"]
        creators += data["staff_column"]["creator"]["bonus_count"]
        creators += data["staff_column"]["creator"]["level_count"]
        bot.send_message(message.chat.id, creators, parse_mode="HTML")
        users = data["staff_column"]["user"]["users"]
        users += data["staff_column"]["user"]["chat_id"]
        users += data["staff_column"]["user"]["chat_name"]
        users += data["staff_column"]["user"]["user_id"]
        users += data["staff_column"]["user"]["user_username"]
        users += data["staff_column"]["user"]["bonus_count"]
        bot.send_message(message.chat.id, users, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ STAFF –∫–Ω–æ–ø–∫–∏ –±–∞–∑–∞ - –∫–æ–Ω–µ—Ü

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–≥—Ä–∞–¥–∞ - –Ω–∞—á–∞–ª–æ
@bot.message_handler(func=lambda message: message.text in ["üíé Rewards", "üíé –ù–∞–≥—Ä–∞–¥–∞"])
def rewards_button_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            creator_id = message.from_user.id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—Ç–µ–ª—è
            language = get_user_language(chat_id)
            text = data['reward_text'][language]['1']
            text += data['reward_text'][language]['2']
            text += data['reward_text'][language]['3']

            groups = get_user_groups(creator_id)

            if groups:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                keyboard = types.InlineKeyboardMarkup()
                if language == "en":
                    keyboard.row(types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                else:
                    keyboard.row(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                for group in groups:
                    group_id, group_name = group
                    keyboard.row(types.InlineKeyboardButton(text=group_name, callback_data=f"group_reward_{group_id}"))

                bot.send_message(chat_id, text, reply_markup=keyboard)

            else:
                keyboard = types.InlineKeyboardMarkup()
                if language == "en":
                    add_button = types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                else:
                    add_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                keyboard.add(add_button)

                bot.send_message(chat_id, text, reply_markup=keyboard)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–≥—Ä–∞–¥–∞':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username if message.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('group_reward_'))
def group_reward_callback_handler(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
        group_id = call.data.split('_')[-1]
        user_language = get_user_language(call.from_user.id)
        group_data = get_name_groups(group_id)
        groups_data = get_user_groups_reward(group_id)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        group_name = group_data[0][0] if group_data else None
        active_users = group_data[0][1] if group_data else None
        bonus_count, level_count = groups_data[0] if groups_data else (None, None)

        if level_count == 0:
            new_active_users = 10
        elif level_count == 1:
            new_active_users = 50
        elif level_count == 2:
            new_active_users = 100
        elif level_count == 3:
            new_active_users = 250
        elif level_count == 4:
            new_active_users = 500
        elif level_count == 5:
            new_active_users = 600
        elif level_count == 6:
            new_active_users = 700
        elif level_count == 7:
            new_active_users = 800
        elif level_count == 8:
            new_active_users = 900
        elif level_count == 9:
            new_active_users = 1000
        else:
            new_active_users = 1000

        if user_language == "rus":
            message_text = f"--- <b>{group_name}</b> ---\n\nüí† –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{bonus_count}</b> <i>Grand –±–æ–Ω—É—Å</i>\n\nüéØ –£—Ä–æ–≤–µ–Ω—å: <b>{level_count}</b> / 10 <i>(—Å –∫–∞–∂–¥–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–µ–±–µ - {level_count}%)</i>\n\nüôé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n\n--- <i>–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ <b>{level_count + 1} <i>({level_count + 1}%)</i></b> —É—Ä–æ–≤–µ–Ω—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë üôé <b>{new_active_users - active_users}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i> ---\n\n--- <i>–ù–∞—á–∏—Å–ª–µ–Ω–∏—è GRAND –±–æ–Ω—É—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Ç 10 –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i> ---"
        else:
            message_text = f"--- <b>{group_name}</b> ---\n\nüí† Earned <b>{bonus_count}</b> <i>Grand bonus</i>\n\nüéØ Level: <b>{level_count}</b> / 10 <i>(from each user accrual to you - {level_count}%)</i>\n\nüôé Active users: <b>{active_users}</b>\n\n--- <i>To advance to level <b>{level_count + 1} <i>({level_count + 1}%)</i></b>, you need üôé <b>{new_active_users - active_users}</b> more active users!</i> ---\n\n--- <i>GRAND bonus accruals for members and group owner are available only from 10 Active users!</i> ---"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = types.InlineKeyboardMarkup()
        if user_language == "rus":
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_reward_to_groups")
        else:
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_reward_to_groups")
        keyboard.add(back_button)
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode='HTML')
    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ 'group_reward_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.from_user.id}\n"
            f"‚Ä¢ Callback Data: {call.data}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.callback_query_handler(func=lambda call: call.data == 'back_reward_to_groups')
def back_to_groups_callback_handler(call):
    try:
        language = get_user_language(call.from_user.id)
        text = data['reward_text'][language]['1']
        text += data['reward_text'][language]['2']
        text += data['reward_text'][language]['3']

        groups = get_user_groups(call.from_user.id)

        if groups:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            keyboard = types.InlineKeyboardMarkup()
            if language == "en":
                keyboard.row(types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
            else:
                keyboard.row(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
            for group in groups:
                group_id, group_name = group
                keyboard.row(types.InlineKeyboardButton(text=group_name, callback_data=f"group_reward_{group_id}"))

            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)

        else:

            keyboard = types.InlineKeyboardMarkup()
            if language == "en":
                add_button = types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
            else:
                add_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
            keyboard.add(add_button)

            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.from_user.id}\n"
            f"‚Ä¢ Callback Data: {call.data}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_name_groups(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_name, active_users FROM chats WHERE chat_id=?", (group_id,))
    groups = cursor.fetchall()
    conn.close()
    return groups

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω—è
def get_user_groups_reward(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT bonus_count, level_count FROM creators WHERE chat_id=?", (group_id,))
    groups = cursor.fetchall()
    conn.close()
    return groups

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–≥—Ä–∞–¥–∞ - –∫–æ–Ω–µ—Ü

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—á–∞–ª–æ
@bot.message_handler(func=lambda message: message.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"])
def settings_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            creator_id = message.from_user.id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—Ç–µ–ª—è

            language = get_user_language(chat_id)

            text_select = data['settings_text'][language]['select']
            text_add = data['settings_text'][language]['add']

            groups = get_user_groups(creator_id)

            if groups:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                keyboard = types.InlineKeyboardMarkup()
                if language == "en":
                    keyboard.row(types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                else:
                    keyboard.row(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                for group in groups:
                    group_id, group_name = group
                    keyboard.row(types.InlineKeyboardButton(text=group_name, callback_data=f"group_settings_{group_id}"))

                bot.send_message(chat_id, text=text_select, reply_markup=keyboard)

            else:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞
                keyboard = types.InlineKeyboardMarkup()
                if language == "en":
                    add_button = types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                else:
                    add_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
                keyboard.add(add_button)

                bot.send_message(chat_id, text=text_add, reply_markup=keyboard)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username if message.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        
        bot.reply_to(message, (
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –í–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, "
            "–Ω–æ –Ω–∞—à —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏, –º—ã —Å–æ–æ–±—â–∏–º –æ –ª—é–±—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "‚ö†Ô∏è Sorry for the inconvenience! There was a technical problem, "
            "but our developer is already working on its solution. "
            "Please stay tuned, we will let you know about any updates."
        ))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_groups(creator_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, chat_name FROM chats WHERE creator_id=?", (creator_id,))
    groups = cursor.fetchall()
    conn.close()
    return groups

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é
def get_group_info(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_name, language, earn, hi_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 FROM chats WHERE chat_id=?", (group_id,))
    group_info = cursor.fetchone()
    conn.close()
    return group_info

def create_settings_keyboard(language, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language_switch_text = data['settings_text'][group_language]['language_switch']['to']
    hi_text_swich_text = data['settings_text'][language]['hi_text_swich']
    if group_earn == "on_earn":
            earn_swich_text = data['settings_text'][language]['earn_swich']['on']
    elif group_earn == "off_earn":
            earn_swich_text = data['settings_text'][language]['earn_swich']['off']
    if good_text == "good_on":
            good_text_swich_text = data['settings_text'][language]['good_swich']['on']
    elif good_text == "good_off":
            good_text_swich_text = data['settings_text'][language]['good_swich']['off']
    if fuck == "on":
            fuck_swich_text = data['settings_text'][language]['fuck_swich']['on']
    elif fuck == "off":
            fuck_swich_text = data['settings_text'][language]['fuck_swich']['off']
    if spam == "on":
            spam_swich_text = data['settings_text'][language]['spam_swich']['on']
    elif spam == "off":
            spam_swich_text = data['settings_text'][language]['spam_swich']['off']
    if flood == "on":
            flood_swich_text = data['settings_text'][language]['flood_swich']['on']
    elif flood == "off":
            flood_swich_text = data['settings_text'][language]['flood_swich']['off']
    if link == "on":
            link_swich_text = data['settings_text'][language]['link_swich']['on']
    elif link == "off":
            link_swich_text = data['settings_text'][language]['link_swich']['off']
    key_add_text = data['settings_text'][language]['key_swich']['add']
    warn_edit_text = data['settings_text'][language]['warn_text']['edit']
    language_button = types.InlineKeyboardButton(text=language_switch_text, callback_data=f"switch_language_{group_id}")
    earn_button = types.InlineKeyboardButton(text=earn_swich_text, callback_data=f"switch_earn_{group_id}")
    hi_text_button = types.InlineKeyboardButton(text=hi_text_swich_text, callback_data=f"switch_hi_text_{group_id}")
    good_text_button = types.InlineKeyboardButton(text=good_text_swich_text, callback_data=f"switch_good_text_{group_id}")
    fuck_button = types.InlineKeyboardButton(text=fuck_swich_text, callback_data=f"switch_fuck_{group_id}")
    spam_button = types.InlineKeyboardButton(text=spam_swich_text, callback_data=f"switch_spam_{group_id}")
    flood_button = types.InlineKeyboardButton(text=flood_swich_text, callback_data=f"switch_flood_{group_id}")
    link_button = types.InlineKeyboardButton(text=link_swich_text, callback_data=f"switch_link_{group_id}")
    key_add_button = types.InlineKeyboardButton(text=key_add_text, callback_data=f"key_add_{group_id}")
    warn_edit_button = types.InlineKeyboardButton(text=warn_edit_text, callback_data=f"warn_edit_{group_id}")
        
    keyboard = types.InlineKeyboardMarkup()
    if language == "rus":
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_settings_to_groups")
    else:
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_settings_to_groups")
    keyboard.add(language_button, earn_button)
    keyboard.add(hi_text_button, good_text_button)
    keyboard.add(fuck_button, spam_button)
    keyboard.add(flood_button, link_button)
    keyboard.add(key_add_button, warn_edit_button)
    keyboard.add(back_button)

    return keyboard


def create_warn_keyboard(language, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    fuck = data['settings_text'][language]['5']
    spam = data['settings_text'][language]['6']
    flood = data['settings_text'][language]['7']
 
    fuck = types.InlineKeyboardButton(text=fuck, callback_data=f"fuck_warn_{group_id}")
    spam = types.InlineKeyboardButton(text=spam, callback_data=f"spam_warn_{group_id}")
    flood = types.InlineKeyboardButton(text=flood, callback_data=f"flood_warn_{group_id}")
        
    keyboard = types.InlineKeyboardMarkup()
    if language == "rus":
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"key_back_{group_id}")
    else:
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"key_back_{group_id}")
    keyboard.add(fuck)
    keyboard.add(spam)
    keyboard.add(flood)
    keyboard.add(back_button)

    return keyboard


def get_time_text(duration, language):
    if duration == 5184000:
        return "üö´"
    elif duration == 5184:
        return "‚ùå"
    else:
        hours = duration / 60 / 60
        if language == "rus":
            if hours in [1,21]:
                return "—á–∞—Å"
            elif hours in [2,3,4,22,23,24]:
                return "—á–∞—Å–∞"
            else:
                return "—á–∞—Å–æ–≤"
        else: 
            if hours in [1]:
                return "hour"
            else:
                return "hours"

def get_time_hour(duration):
    if duration == 5184000:
        return duration * 0
    elif duration == 5184:
        return duration * 0
    else:
        return duration / 60 / 60

def create_warn_message(language, group_name, language_info, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info


    dfl1 =  get_time_hour(duration_flood1)
    dfl2 =  get_time_hour(duration_flood2)
    dfl3 =  get_time_hour(duration_flood3)
    df1 =  get_time_hour(duration_fuck1)
    df2 =  get_time_hour(duration_fuck2)
    df3 =  get_time_hour(duration_fuck3)
    ds1 =  get_time_hour(duration_spam1)
    ds2 =  get_time_hour(duration_spam2)
    ds3 =  get_time_hour(duration_spam3)

    time_flood1 = get_time_text(duration_flood1, language)
    time_flood2 = get_time_text(duration_flood2, language)
    time_flood3 = get_time_text(duration_flood3, language)
    time_spam1 = get_time_text(duration_spam1, language)
    time_spam2 = get_time_text(duration_spam2, language)
    time_spam3 = get_time_text(duration_spam3, language)
    time_fuck1 = get_time_text(duration_fuck1, language)
    time_fuck2 = get_time_text(duration_fuck2, language)
    time_fuck3 = get_time_text(duration_fuck3, language)
    warn_text1 = data['settings_text'][language]['warn_text']['1']
    warn_text2 = data['settings_text'][language]['warn_text']['2']
    warn_text3 = data['settings_text'][language]['warn_text']['3']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n   [1‚ö†Ô∏è <b>{int(df1)}</b> {time_fuck1}] [2‚ö†Ô∏è <b>{int(df2)}</b> {time_fuck2}] [3‚ö†Ô∏è <b>{int(df3)}</b> {time_fuck3}]\n<i>{warn_text2}</i>\n   [1‚ö†Ô∏è <b>{int(ds1)}</b> {time_spam1}] [2‚ö†Ô∏è <b>{int(ds2)}</b> {time_spam2}] [3‚ö†Ô∏è <b>{int(ds3)}</b> {time_spam3}]\n<i>{warn_text3}</i>\n   [1‚ö†Ô∏è <b>{int(dfl1)}</b> {time_flood1}] [2‚ö†Ô∏è <b>{int(dfl2)}</b> {time_flood2}] [3‚ö†Ô∏è <b>{int(dfl3)}</b> {time_flood3}]"    

    return message_text


def create_settings_message(language, group_name, language_info, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info


    dfl1 =  get_time_hour(duration_flood1)
    dfl2 =  get_time_hour(duration_flood2)
    dfl3 =  get_time_hour(duration_flood3)
    df1 =  get_time_hour(duration_fuck1)
    df2 =  get_time_hour(duration_fuck2)
    df3 =  get_time_hour(duration_fuck3)
    ds1 =  get_time_hour(duration_spam1)
    ds2 =  get_time_hour(duration_spam2)
    ds3 =  get_time_hour(duration_spam3)

    time_flood1 = get_time_text(duration_flood1, language)
    time_flood2 = get_time_text(duration_flood2, language)
    time_flood3 = get_time_text(duration_flood3, language)
    time_spam1 = get_time_text(duration_spam1, language)
    time_spam2 = get_time_text(duration_spam2, language)
    time_spam3 = get_time_text(duration_spam3, language)
    time_fuck1 = get_time_text(duration_fuck1, language)
    time_fuck2 = get_time_text(duration_fuck2, language)
    time_fuck3 = get_time_text(duration_fuck3, language)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ group_text 200 —Å–∏–º–≤–æ–ª–æ–≤
    if len(group_text) > 200:
        group_text = group_text[:200]  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤

    if group_earn == "on_earn":
        earn_text = data['settings_text'][language]['earn_swich']['succses']
    elif group_earn == "off_earn":
        earn_text = data['settings_text'][language]['earn_swich']['failure']
    if good_text == "good_on":
        good_text_text = data['settings_text'][language]['good_swich']['succses']
    elif good_text == "good_off":
        good_text_text = data['settings_text'][language]['good_swich']['failure']
    if fuck == "on":
        fuck_text = data['settings_text'][language]['fuck_swich']['succses']
    elif fuck == "off":
        fuck_text = data['settings_text'][language]['fuck_swich']['failure']
    if spam == "on":
        spam_text = data['settings_text'][language]['spam_swich']['succses']
    elif spam == "off":
        spam_text = data['settings_text'][language]['spam_swich']['failure']
    if flood == "on":
        flood_text = data['settings_text'][language]['flood_swich']['succses']
    elif flood == "off":
        flood_text = data['settings_text'][language]['flood_swich']['failure']
    if link == "on":
        link_text = data['settings_text'][language]['link_swich']['succses']
    elif link == "off":
        link_text = data['settings_text'][language]['link_swich']['failure']
    if key == "non":
        key_text = data['settings_text'][language]['key_swich']['no']
    else:
        keywords_list = key.split(',')  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π
        key_text = ", ".join(keywords_list[:5])  # –í–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    warn_text1 = data['settings_text'][language]['warn_text']['1']
    warn_text2 = data['settings_text'][language]['warn_text']['2']
    warn_text3 = data['settings_text'][language]['warn_text']['3']
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    t1 = data['settings_text'][language]['1']
    t2 = data['settings_text'][language]['2']
    t3 = data['settings_text'][language]['3']
    t4 = data['settings_text'][language]['4']
    t5 = data['settings_text'][language]['5']
    t6 = data['settings_text'][language]['6']
    t7 = data['settings_text'][language]['7']
    t8 = data['settings_text'][language]['8']
    t9 = data['settings_text'][language]['9']
    t10 = data['settings_text'][language]['10']
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
    language_icon = 'üá∑üá∫' if group_language == 'rus' else 'üá∫üá∏'
    if language == "en":
        text = f"Customize the \"{group_name}\" group:"
    else:
        text = f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É \"{group_name}\":"
    message_text = f"{text}\n\n{t1} {language_icon}\n\n{t2}\n   <i>{earn_text}</i>\n\n{t3} \n<i>\"@username, {group_text} ...\"</i>\n\n{t4}\n   <i>{good_text_text}</i>\n\n{t5}\n   <i>{fuck_text}</i>\n\n{t6}\n   <i>{spam_text}</i>\n\n{t7}\n   <i>{flood_text}</i>\n\n{t8}\n   <i>{link_text}</i>\n\n{t9}\n   <i>{key_text}</i> ...\n\n{t10}\n\n<i>{warn_text1}</i>\n   [1‚ö†Ô∏è <b>{int(df1)}</b> {time_fuck1}] [2‚ö†Ô∏è <b>{int(df2)}</b> {time_fuck2}] [3‚ö†Ô∏è <b>{int(df3)}</b> {time_fuck3}]\n<i>{warn_text2}</i>\n   [1‚ö†Ô∏è <b>{int(ds1)}</b> {time_spam1}] [2‚ö†Ô∏è <b>{int(ds2)}</b> {time_spam2}] [3‚ö†Ô∏è <b>{int(ds3)}</b> {time_spam3}]\n<i>{warn_text3}</i>\n   [1‚ö†Ô∏è <b>{int(dfl1)}</b> {time_flood1}] [2‚ö†Ô∏è <b>{int(dfl2)}</b> {time_flood2}] [3‚ö†Ô∏è <b>{int(dfl3)}</b> {time_flood3}]"    

    return message_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("group_settings_"))
def group_settings_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        language_info = get_user_language(chat_id)
        
        if group_info:
            group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
            language = language_info

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = create_settings_keyboard(language, group_id)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = create_settings_message(language, group_name, language_info, group_id)
            
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            if language_info == "en":
                bot.answer_callback_query(call.id, "Group data not found - contact technical support!")
            else:
                bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'group_settings_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="An error occurred. Please try again later.")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–∞–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_settings_to_groups"))
def group_back_settings_handler(call):
    try:
        chat_id = call.message.chat.id
        if call.message.chat.type == "private":
            creator_id = call.from_user.id  

            language = get_user_language(chat_id)
            text_select = data['settings_text'][language]['select']

            groups = get_user_groups(creator_id)

            if groups:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                keyboard = types.InlineKeyboardMarkup()
                if language == "en":
                    keyboard.row(types.InlineKeyboardButton("‚ûï Add to group", url="https://t.me/gmoderator_bot?startgroup=botstart"))  
                else:
                    keyboard.row(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/gmoderator_bot?startgroup=botstart"))  
                for group in groups:
                    group_id, group_name = group
                    keyboard.row(types.InlineKeyboardButton(text=group_name, callback_data=f"group_settings_{group_id}"))

                bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=text_select, reply_markup=keyboard)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        
        bot.send_message(chat_id, (
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –í–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, "
            "–Ω–æ –Ω–∞—à —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏, –º—ã —Å–æ–æ–±—â–∏–º –æ –ª—é–±—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "‚ö†Ô∏è Sorry for the inconvenience! There was a technical problem, "
            "but our developer is already working on its solution. "
            "Please stay tuned, we will let you know about any updates."
        ))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_language(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM chats WHERE chat_id=?", (group_id,))
    language = cursor.fetchone()[0]
    conn.close()
    return language

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_language(group_id, new_language):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET language=? WHERE chat_id=?", (new_language, group_id))
    conn.commit()
    conn.close()
    print(f"Language for group {group_id} updated to {new_language}")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_hi_text(group_id, new_text):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET hi_text=? WHERE chat_id=?", (new_text, group_id))
    conn.commit()
    conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_language_"))
def switch_group_language_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        group_info = get_group_info(group_id) 
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        current_language = get_group_language(group_id)
        new_language = "en" if current_language == "rus" else "rus"
        language_info = get_user_language(chat_id)
        language = language_info
        new_text = None
        if group_text == "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å GRAND!":
            new_text = "Welcome! Be active and earn GRAND bonus!"
        elif group_text == "Welcome! Be active and earn GRAND bonus!":
            new_text = "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å GRAND!"
        else:
            pass

        update_group_language(group_id, new_language)
        if new_text:
            update_group_hi_text(group_id, new_text)

        keyboard = create_settings_keyboard(language, group_id)
        success_message = data['settings_text'][language]['language_switch']['succses']
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = create_settings_message(language, group_name, language_info, group_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_language_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_earn(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT earn FROM chats WHERE chat_id=?", (group_id,))
    earn = cursor.fetchone()[0]
    conn.close()
    return earn

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_earn(group_id, new_earn):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET earn=? WHERE chat_id=?", (new_earn, group_id))
    conn.commit()
    conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_earn_"))
def switch_group_earn_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        new_earn = "off_earn" if current_earn == "on_earn" else "on_earn"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_earn(group_id, new_earn)
        
        if new_earn == "on_earn":
            success_message = data['settings_text'][language]['earn_swich']['succses']
        else:
            success_message = data['settings_text'][language]['earn_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ –ø—Ä–æ—Ñ –æ–±—â–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_good_text(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT good_text FROM chats WHERE chat_id=?", (group_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ –ø—Ä–æ—Ñ –æ–±—â–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_good_text(group_id, new_good_text):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET good_text=? WHERE chat_id=?", (new_good_text, group_id))
    conn.commit()
    conn.close()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_good_text_"))
def switch_group_good_text_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_good_text = get_group_good_text(group_id)
        new_good_text = "good_off" if current_good_text == "good_on" else "good_on"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_good_text(group_id, new_good_text)
        
        if new_good_text == "good_on":
            success_message = data['settings_text'][language]['good_swich']['succses']
        else:
            success_message = data['settings_text'][language]['good_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_good_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ –º–∞—Ç–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_fuck(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT fuck FROM chats WHERE chat_id=?", (group_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ –º–∞—Ç–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_fuck(group_id, new_fuck):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET fuck=? WHERE chat_id=?", (new_fuck, group_id))
    conn.commit()
    conn.close()

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_fuck_"))
def switch_group_fuck_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_fuck = get_group_fuck(group_id)
        new_fuck = "off" if current_fuck == "on" else "on"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_fuck(group_id, new_fuck)
        
        if new_fuck == "on":
            success_message = data['settings_text'][language]['fuck_swich']['succses']
        else:
            success_message = data['settings_text'][language]['fuck_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_good_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Å–ø–∞–º–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_spam(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT spam FROM chats WHERE chat_id=?", (group_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Å–ø–∞–º–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_spam(group_id, new_spam):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET spam=? WHERE chat_id=?", (new_spam, group_id))
    conn.commit()
    conn.close()

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_spam_"))
def switch_group_spam_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_spam = get_group_spam(group_id)
        new_spam = "off" if current_spam == "on" else "on"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_spam(group_id, new_spam)
        
        if new_spam == "on":
            success_message = data['settings_text'][language]['spam_swich']['succses']
        else:
            success_message = data['settings_text'][language]['spam_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_good_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Ñ–ª—É–¥–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_flood(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT flood FROM chats WHERE chat_id=?", (group_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Ñ–ª—É–¥–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_flood(group_id, new_flood):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET flood=? WHERE chat_id=?", (new_flood, group_id))
    conn.commit()
    conn.close()

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_flood_"))
def switch_group_flood_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_flood = get_group_flood(group_id)
        new_flood = "off" if current_flood == "on" else "on"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_flood(group_id, new_flood)
        
        if new_flood == "on":
            success_message = data['settings_text'][language]['flood_swich']['succses']
        else:
            success_message = data['settings_text'][language]['flood_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_good_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Å—Å—ã–ª–∫–∞—Ö –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_link(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT link FROM chats WHERE chat_id=?", (group_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Å—Å—ã–ª–∫–∞—Ö –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_link(group_id, new_link):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET link=? WHERE chat_id=?", (new_link, group_id))
    conn.commit()
    conn.close()

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_link_"))
def switch_group_flood_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_link = get_group_link(group_id)
        new_link = "off" if current_link == "on" else "on"
        language_info = get_user_language(chat_id)
        language = language_info
        update_group_link(group_id, new_link)
        
        if new_link == "on":
            success_message = data['settings_text'][language]['link_swich']['succses']
        else:
            success_message = data['settings_text'][language]['link_swich']['failure']
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)
            
        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_good_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def set_waiting_hi_text(chat_id, group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO waiting_hi_text (chat_id, group_id) VALUES (?, ?)", (chat_id, group_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def get_waiting_hi_text(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT group_id FROM waiting_hi_text WHERE chat_id=?", (chat_id,))
    group_id = cursor.fetchone()
    conn.close()
    return group_id[0] if group_id else None

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def remove_waiting_hi_text(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM waiting_hi_text WHERE chat_id=?", (chat_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_hi_text(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT hi_text FROM chats WHERE chat_id=?", (group_id,))
    hi_text = cursor.fetchone()[0]
    conn.close()
    return hi_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_hi_text(group_id, new_hi_text):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET hi_text=? WHERE chat_id=?", (new_hi_text, group_id))
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("switch_hi_text_"))
def switch_hi_text_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
        language_creator = get_user_language(chat_id)
        
        instruction_text = data['settings_text'][language_creator]['hi_text_wait']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=instruction_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        set_waiting_hi_text(chat_id, group_id)
    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_hi_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(func=lambda message: get_waiting_hi_text(message.chat.id) is not None)
def update_hi_text_handler(message):
    try:
        chat_id = message.chat.id
        username = message.from_user.username
        group_id = get_waiting_hi_text(chat_id)
        new_hi_text = message.text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_hi_text(group_id, new_hi_text)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        remove_waiting_hi_text(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
        language_info = get_user_language(chat_id)
        language = language_info
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        keyboard = create_settings_keyboard(language, group_id)
        success_message = data['settings_text'][language]['hi_text_succses']
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = create_settings_message(language, group_name, language_info, group_id)
        bot.send_message(chat_id=chat_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Å—Ç–≤–∏—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def set_waiting_keyadd(chat_id, group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO waiting_keywords (chat_id, group_id) VALUES (?, ?)", (chat_id, group_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def get_waiting_keyadd(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT group_id FROM waiting_keywords WHERE chat_id=?", (chat_id,))
    group_id = cursor.fetchone()
    conn.close()
    return group_id[0] if group_id else None

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def remove_waiting_keyadd(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM waiting_keywords WHERE chat_id=?", (chat_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_keyadd(group_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key FROM chats WHERE chat_id=?", (group_id,))
    key = cursor.fetchone()[0]
    conn.close()
    return key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_group_keyadd(group_id, new_key):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE chats SET key=? WHERE chat_id=?", (new_key, group_id))
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("key_add_"))
def switch_key_add_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
        language_creator = get_user_language(chat_id)
        if key == "non":
            new_text = data['settings_text'][language_creator]['key_swich']['wait']
            –µxample_text = data['settings_text'][language_creator]['key_swich']['–µxample']
            instruction_text = f"{new_text}\n\n<i>{–µxample_text}</i>"
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=instruction_text, parse_mode="HTML")
        else:
            new_text = data['settings_text'][language_creator]['key_swich']['wait']
            keywords_list = key.split(',')  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π
            limited_keywords = ", ".join(keywords_list[:20])  # –í–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
            warning_text = data['settings_text'][language_creator]['key_swich']['warning']
            button_text = data['settings_text'][language_creator]['key_swich']['del']
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"key_back_{group_id}")
            delete_button = types.InlineKeyboardButton(text=button_text, callback_data=f"key_delete_{group_id}")
            keyboard.add(back_button, delete_button)
            instruction_text = f"{new_text}\n\n<code>{limited_keywords}</code> ...\n\n{warning_text}"
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=instruction_text, reply_markup=keyboard, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        set_waiting_keyadd(chat_id, group_id)
    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_hi_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("key_delete_"))
def switch_key_delete_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        language_info = get_user_language(chat_id)
        language = language_info
        new_key = "non"
        update_group_keyadd(group_id, new_key)
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        remove_waiting_keyadd(chat_id)
        keyboard = create_settings_keyboard(language, group_id)
        success_message = data['settings_text'][language]['key_swich']['failure']
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = create_settings_message(language, group_name, language_info, group_id)
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_hi_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("key_back_"))
def switch_key_back_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        language_info = get_user_language(chat_id)
        language = language_info
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã

        keyboard = create_settings_keyboard(language, group_id)
        message_text = create_settings_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_hi_text_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(func=lambda message: get_waiting_keyadd(message.chat.id) is not None)
def update_keyadd_handler(message):
    try:
        chat_id = message.chat.id
        username = message.from_user.username
        group_id = get_waiting_keyadd(chat_id)
        new_key = message.text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_keyadd(group_id, new_key)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        remove_waiting_keyadd(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
        language_info = get_user_language(chat_id)
        language = language_info
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        keyboard = create_settings_keyboard(language, group_id)
        success_message = data['settings_text'][language]['hi_text_succses']
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = create_settings_message(language, group_name, language_info, group_id)
        bot.send_message(chat_id=chat_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, success_message)

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Å—Ç–≤–∏—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_edit_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_keyboard(language, group_id)
        message_text = create_warn_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

def update_group_duration(group_id, column_name, new_value):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE chats SET {column_name}=? WHERE chat_id=?", (new_value, group_id))
    conn.commit()
    conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–¥–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_back_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_keyboard(language, group_id)
        message_text = create_warn_message(language, group_name, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_hours_fuck_keyboard(language, group_id, duration_fuck, count):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

    warn_texts = {}
    for i in range(1, 25):
        warn_text = data['settings_text'][language]['warn_text'][f"{i}h"]
        if int(duration_fuck) / 3600 == i:
            warn_texts[f"warn_{i}h"] = f"{warn_text} ‚úÖ"
        else:
            warn_texts[f"warn_{i}h"] = warn_text

    buttons = []
    for key, text in warn_texts.items():
        button = types.InlineKeyboardButton(text=text, callback_data=f"fuckdur_{key}_{group_id}_{duration_fuck}_{count}")
        buttons.append(button)

    keyboard = types.InlineKeyboardMarkup()

    rows = [buttons[i:i+5] for i in range(0, len(buttons), 5)]
    for row in rows:
        keyboard.row(*row)

    if language == "rus":
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_fuck_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"fuck_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_fuck_back_{group_id}")
    else:
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_fuck_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"fuck_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_fuck_back_{group_id}")

    keyboard.add(no_button, back_button, ban_button)

    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('fuck_ban_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_fuck{count}"
        newduration = "5184000"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_fuck_count_keyboard(language, group_id)
        message_text = create_warn_fuck_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('no_fuck_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_fuck{count}"
        newduration = "5184"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_fuck_count_keyboard(language, group_id)
        message_text = create_warn_fuck_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('fuckdur_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        key = call.data.split("_")[-4]
        group_id = call.data.split("_")[-3]
        duration_fuck = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        duration = ''.join(filter(str.isdigit, key))
        text_combination = f"duration_fuck{count}"
        newduration = int(duration) * 60 * 60

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_fuck_count_keyboard(language, group_id)
        message_text = create_warn_fuck_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –º–∞—Ç–∞
def create_warn_fuck_count_message(language, language_info, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    df1 =  get_time_hour(duration_fuck1)
    df2 =  get_time_hour(duration_fuck2)
    df3 =  get_time_hour(duration_fuck3)

    time_fuck1 = get_time_text(duration_fuck1, language)
    time_fuck2 = get_time_text(duration_fuck2, language)
    time_fuck3 = get_time_text(duration_fuck3, language)
    warn_text1 = data['settings_text'][language]['warn_text']['1']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[1‚ö†Ô∏è <b>{int(df1)}</b> {time_fuck1}]\n\n[2‚ö†Ô∏è <b>{int(df2)}</b> {time_fuck2}]\n\n[3‚ö†Ô∏è <b>{int(df3)}</b> {time_fuck3}]"    

    return message_text

   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_edit_warn_fuck_count_message(language, language_info, group_id, df, time_fuck):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    warn_text1 = data['settings_text'][language]['warn_text']['1']
    warn_text2 = data['settings_text'][language]['warn_text']['4']
    warn_text3 = data['settings_text'][language]['warn_text']['5']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[‚ö†Ô∏è <b>{int(float(df))}</b> {time_fuck}]\n\n<i>{warn_text2}</i>\n\n<i>{warn_text3}</i>"

    return message_text
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
def create_warn_fuck_count_keyboard(language, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    df1 =  get_time_hour(duration_fuck1)
    df2 =  get_time_hour(duration_fuck2)
    df3 =  get_time_hour(duration_fuck3)
    count1 = "1"
    count2 = "2"
    count3 = "3"
    time_fuck1 = get_time_text(duration_fuck1, language)
    time_fuck2 = get_time_text(duration_fuck2, language)
    time_fuck3 = get_time_text(duration_fuck3, language)
    var1 = types.InlineKeyboardButton("1 ‚ö†Ô∏è", callback_data=f"warn_fuck_count_{group_id}_{duration_fuck1}_{df1}_{time_fuck1}_{count1}")
    var2 = types.InlineKeyboardButton("2 ‚ö†Ô∏è", callback_data=f"warn_fuck_count_{group_id}_{duration_fuck2}_{df2}_{time_fuck2}_{count2}")
    var3 = types.InlineKeyboardButton("3 ‚ö†Ô∏è", callback_data=f"warn_fuck_count_{group_id}_{duration_fuck3}_{df3}_{time_fuck3}_{count3}")
    keyboard = types.InlineKeyboardMarkup()
    if language == "rus":
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_back_{group_id}")
    else:
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_back_{group_id}")
    keyboard.row(var1, var2, var3)
    keyboard.add(back_button)

    return keyboard
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_fuck_back_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_fuck_count_keyboard(language, group_id)
        message_text = create_warn_fuck_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∫–∞–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("fuck_warn_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_fuck_count_keyboard(language, group_id)
        message_text = create_warn_fuck_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–Ω–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_fuck_count_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-5]
        duration_fuck = call.data.split("_")[-4]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        df = call.data.split("_")[-3]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        time_fuck = call.data.split("_")[-2]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        count = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info

        keyboard = create_hours_fuck_keyboard(language, group_id, duration_fuck, count)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        message_text = create_edit_warn_fuck_count_message(language, language_info, group_id, df, time_fuck)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_hours_spam_keyboard(language, group_id, duration_spam, count):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

    warn_texts = {}
    for i in range(1, 25):
        warn_text = data['settings_text'][language]['warn_text'][f"{i}h"]
        if int(duration_spam) / 3600 == i:
            warn_texts[f"warn_{i}h"] = f"{warn_text} ‚úÖ"
        else:
            warn_texts[f"warn_{i}h"] = warn_text

    buttons = []
    for key, text in warn_texts.items():
        button = types.InlineKeyboardButton(text=text, callback_data=f"spamdur_{key}_{group_id}_{duration_spam}_{count}")
        buttons.append(button)

    keyboard = types.InlineKeyboardMarkup()

    rows = [buttons[i:i+5] for i in range(0, len(buttons), 5)]
    for row in rows:
        keyboard.row(*row)

    if language == "rus":
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_spam_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"spam_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_spam_back_{group_id}")
    else:
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_spam_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"spam_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_spam_back_{group_id}")

    keyboard.add(no_button, back_button, ban_button)

    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('spam_ban_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_spam{count}"
        newduration = "5184000"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_spam_count_keyboard(language, group_id)
        message_text = create_warn_spam_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('no_spam_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_spam{count}"
        newduration = "5184"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_spam_count_keyboard(language, group_id)
        message_text = create_warn_spam_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('spamdur_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        key = call.data.split("_")[-4]
        group_id = call.data.split("_")[-3]
        duration_fuck = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        duration = ''.join(filter(str.isdigit, key))
        text_combination = f"duration_spam{count}"
        newduration = int(duration) * 60 * 60

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_spam_count_keyboard(language, group_id)
        message_text = create_warn_spam_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –º–∞—Ç–∞
def create_warn_spam_count_message(language, language_info, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    df1 =  get_time_hour(duration_spam1)
    df2 =  get_time_hour(duration_spam2)
    df3 =  get_time_hour(duration_spam3)

    time_fuck1 = get_time_text(duration_spam1, language)
    time_fuck2 = get_time_text(duration_spam2, language)
    time_fuck3 = get_time_text(duration_spam3, language)
    warn_text1 = data['settings_text'][language]['warn_text']['2']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[1‚ö†Ô∏è <b>{int(df1)}</b> {time_fuck1}]\n\n[2‚ö†Ô∏è <b>{int(df2)}</b> {time_fuck2}]\n\n[3‚ö†Ô∏è <b>{int(df3)}</b> {time_fuck3}]"    

    return message_text

   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_edit_warn_spam_count_message(language, language_info, group_id, df, time_fuck):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    warn_text1 = data['settings_text'][language]['warn_text']['2']
    warn_text2 = data['settings_text'][language]['warn_text']['4']
    warn_text3 = data['settings_text'][language]['warn_text']['5']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[‚ö†Ô∏è <b>{int(float(df))}</b> {time_fuck}]\n\n<i>{warn_text2}</i>\n\n<i>{warn_text3}</i>"

    return message_text
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
def create_warn_spam_count_keyboard(language, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    df1 =  get_time_hour(duration_spam1)
    df2 =  get_time_hour(duration_spam2)
    df3 =  get_time_hour(duration_spam3)
    count1 = "1"
    count2 = "2"
    count3 = "3"
    time_fuck1 = get_time_text(duration_spam1, language)
    time_fuck2 = get_time_text(duration_spam2, language)
    time_fuck3 = get_time_text(duration_spam3, language)
    var1 = types.InlineKeyboardButton("1 ‚ö†Ô∏è", callback_data=f"warn_spam_count_{group_id}_{duration_spam1}_{df1}_{time_fuck1}_{count1}")
    var2 = types.InlineKeyboardButton("2 ‚ö†Ô∏è", callback_data=f"warn_spam_count_{group_id}_{duration_spam2}_{df2}_{time_fuck2}_{count2}")
    var3 = types.InlineKeyboardButton("3 ‚ö†Ô∏è", callback_data=f"warn_spam_count_{group_id}_{duration_spam3}_{df3}_{time_fuck3}_{count3}")
    keyboard = types.InlineKeyboardMarkup()
    if language == "rus":
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_back_{group_id}")
    else:
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_back_{group_id}")
    keyboard.row(var1, var2, var3)
    keyboard.add(back_button)

    return keyboard
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_spam_back_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_spam_count_keyboard(language, group_id)
        message_text = create_warn_spam_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∫–∞–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("spam_warn_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_spam_count_keyboard(language, group_id)
        message_text = create_warn_spam_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–Ω–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_spam_count_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-5]
        duration_spam = call.data.split("_")[-4]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        df = call.data.split("_")[-3]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        time_fuck = call.data.split("_")[-2]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        count = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info

        keyboard = create_hours_spam_keyboard(language, group_id, duration_spam, count)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        message_text = create_edit_warn_spam_count_message(language, language_info, group_id, df, time_fuck)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_hours_flood_keyboard(language, group_id, duration_flood, count):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

    warn_texts = {}
    for i in range(1, 25):
        warn_text = data['settings_text'][language]['warn_text'][f"{i}h"]
        if int(duration_flood) / 3600 == i:
            warn_texts[f"warn_{i}h"] = f"{warn_text} ‚úÖ"
        else:
            warn_texts[f"warn_{i}h"] = warn_text

    buttons = []
    for key, text in warn_texts.items():
        button = types.InlineKeyboardButton(text=text, callback_data=f"flooddur_{key}_{group_id}_{duration_flood}_{count}")
        buttons.append(button)

    keyboard = types.InlineKeyboardMarkup()

    rows = [buttons[i:i+5] for i in range(0, len(buttons), 5)]
    for row in rows:
        keyboard.row(*row)

    if language == "rus":
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_flood_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"flood_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_flood_back_{group_id}")
    else:
        no_button = types.InlineKeyboardButton("‚ùå", callback_data=f"no_flood_{group_id}_{count}")
        ban_button = types.InlineKeyboardButton("üö´ Ban", callback_data=f"flood_ban_{group_id}_{count}")
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_flood_back_{group_id}")

    keyboard.add(no_button, back_button, ban_button)

    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('flood_ban_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_flood{count}"
        newduration = "5184000"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_flood_count_keyboard(language, group_id)
        message_text = create_warn_flood_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('no_flood_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        text_combination = f"duration_flood{count}"
        newduration = "5184"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_flood_count_keyboard(language, group_id)
        message_text = create_warn_flood_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('flooddur_'))
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        chat_id = call.message.chat.id
        key = call.data.split("_")[-4]
        group_id = call.data.split("_")[-3]
        duration_flood = call.data.split("_")[-2]
        count = call.data.split("_")[-1]
        duration = ''.join(filter(str.isdigit, key))
        text_combination = f"duration_flood{count}"
        newduration = int(duration) * 60 * 60

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_group_duration(group_id, text_combination, newduration)

        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_flood_count_keyboard(language, group_id)
        message_text = create_warn_flood_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

        sent_message = bot.send_message(chat_id, "‚úÖ")

        time.sleep(1)

        bot.delete_message(chat_id, sent_message.message_id)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –º–∞—Ç–∞
def create_warn_flood_count_message(language, language_info, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    df1 =  get_time_hour(duration_flood1)
    df2 =  get_time_hour(duration_flood2)
    df3 =  get_time_hour(duration_flood3)

    time_fuck1 = get_time_text(duration_flood1, language)
    time_fuck2 = get_time_text(duration_flood2, language)
    time_fuck3 = get_time_text(duration_flood3, language)
    warn_text1 = data['settings_text'][language]['warn_text']['3']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[1‚ö†Ô∏è <b>{int(df1)}</b> {time_fuck1}]\n\n[2‚ö†Ô∏è <b>{int(df2)}</b> {time_fuck2}]\n\n[3‚ö†Ô∏è <b>{int(df3)}</b> {time_fuck3}]"    

    return message_text

   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
def create_edit_warn_flood_count_message(language, language_info, group_id, df, time_fuck):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    language = language_info

    warn_text1 = data['settings_text'][language]['warn_text']['3']
    warn_text2 = data['settings_text'][language]['warn_text']['4']
    warn_text3 = data['settings_text'][language]['warn_text']['5']
    t10 = data['settings_text'][language]['10']
    message_text = f"{t10}\n\n<i>{warn_text1}</i>\n\n[‚ö†Ô∏è <b>{int(float(df))}</b> {time_fuck}]\n\n<i>{warn_text2}</i>\n\n<i>{warn_text3}</i>"

    return message_text
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–±–æ—Ä–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
def create_warn_flood_count_keyboard(language, group_id):
    group_info = get_group_info(group_id)
    group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info
    df1 =  get_time_hour(duration_flood1)
    df2 =  get_time_hour(duration_flood2)
    df3 =  get_time_hour(duration_flood3)
    count1 = "1"
    count2 = "2"
    count3 = "3"
    time_fuck1 = get_time_text(duration_flood1, language)
    time_fuck2 = get_time_text(duration_flood2, language)
    time_fuck3 = get_time_text(duration_flood3, language)
    var1 = types.InlineKeyboardButton("1 ‚ö†Ô∏è", callback_data=f"warn_flood_count_{group_id}_{duration_flood1}_{df1}_{time_fuck1}_{count1}")
    var2 = types.InlineKeyboardButton("2 ‚ö†Ô∏è", callback_data=f"warn_flood_count_{group_id}_{duration_flood2}_{df2}_{time_fuck2}_{count2}")
    var3 = types.InlineKeyboardButton("3 ‚ö†Ô∏è", callback_data=f"warn_flood_count_{group_id}_{duration_flood3}_{df3}_{time_fuck3}_{count3}")
    keyboard = types.InlineKeyboardMarkup()
    if language == "rus":
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warn_back_{group_id}")
    else:
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"warn_back_{group_id}")
    keyboard.row(var1, var2, var3)
    keyboard.add(back_button)

    return keyboard
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_flood_back_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_flood_count_keyboard(language, group_id)
        message_text = create_warn_flood_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∫–∞–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("flood_warn_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_info = get_group_info(group_id)
        group_name, group_language, group_earn, group_text, good_text, fuck, spam, flood, link, key, duration_flood1, duration_flood2, duration_flood3, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3 = group_info

        keyboard = create_warn_flood_count_keyboard(language, group_id)
        message_text = create_warn_flood_count_message(language, language_info, group_id)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–Ω–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("warn_flood_count_"))
def warn_group_edit_handler(call):
    try:
        chat_id = call.message.chat.id
        group_id = call.data.split("_")[-5]
        duration_spam = call.data.split("_")[-4]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        df = call.data.split("_")[-3]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        time_fuck = call.data.split("_")[-2]  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        count = call.data.split("_")[-1]
        current_earn = get_group_earn(group_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        language_info = get_user_language(chat_id)
        language = language_info

        keyboard = create_hours_flood_keyboard(language, group_id, duration_spam, count)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        message_text = create_edit_warn_flood_count_message(language, language_info, group_id, df, time_fuck)

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=message_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'switch_earn_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∫–æ–Ω–µ—Ü




    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω



def connect_db():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö chat_data.db.

    Returns:
        connect_to_dbion: –û–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        conn = connect_to_db('chat_data.db')
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        return None

#–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è id –ø–æ username –≤ —á–∞—Ç–µ
def get_user_id_by_username(username, chat_id):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE user_username = ? AND chat_id = ?", (username, chat_id))
        result = cursor.fetchone()
        if result:
            return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            return None
    except Exception as e:
        print(f"Error getting user ID by username: {e}")
        return None
    finally:
        conn.close()
    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–º–∞–µ—Ç 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_warncount_by_username(username, chat_id):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT warn_count FROM users WHERE user_username = ? AND chat_id = ?", (username, chat_id))
        result = cursor.fetchone()
        if result:
            current_count = result[0]
            if current_count > 0:
                new_count = max(0, current_count - 1)
                cursor.execute("UPDATE users SET warn_count = ? WHERE user_username = ? AND chat_id = ?", (new_count, username, chat_id))
                conn.commit()
                return new_count
            else:
                return 0  # –ï—Å–ª–∏ —É–∂–µ 0, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        else:
            return None
    except Exception as e:
        print(f"Error getting or updating warn count: {e}")
        return None
    finally:
        conn.close()

    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–º–∞–µ—Ç 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø—ã
def delete_warncount_by_group(chat_id):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT warn_count FROM chats WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        if result:
            current_count = result[0]
            if current_count > 0:
                new_count = max(0, current_count - 1)
                cursor.execute("UPDATE chats SET warn_count = ? WHERE chat_id = ?", (new_count, chat_id))
                conn.commit()
                return new_count
            else:
                return 0  # –ï—Å–ª–∏ —É–∂–µ 0, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        else:
            return None
    except Exception as e:
        print(f"Error getting or updating warn count: {e}")
        return None
    finally:
        conn.close()


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def add_warncount_by_username(username, chat_id):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT warn_count FROM users WHERE user_username = ? AND chat_id = ?", (username, chat_id))
        result = cursor.fetchone()
        if result:
            current_count = result[0]
            if current_count < 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –º–µ–Ω—å—à–µ 3
                new_count = current_count + 1
                cursor.execute("UPDATE users SET warn_count = ? WHERE user_username = ? AND chat_id = ?", (new_count, username, chat_id))
                conn.commit()
                return new_count
            else:
                return 3  # –ï—Å–ª–∏ —É–∂–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 3, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        else:
            return None
    except Exception as e:
        print(f"Error getting or updating warn count: {e}")
        return None
    finally:
        conn.close()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ
def add_warncount_by_group(chat_id):
    conn = connect_db()
    if conn is None:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT warn_count FROM chats WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        if result:
            current_count = result[0]
            new_count = current_count + 1
            cursor.execute("UPDATE chats SET warn_count = ? WHERE chat_id = ?", (new_count, chat_id))
            conn.commit()
            return new_count
        else:
            return None
    except Exception as e:
        print(f"Error getting or updating warn count: {e}")
        return None
    finally:
        conn.close()


def format_duration(seconds):
    periods = [
        ('–¥–µ–Ω—å', 60 * 60 * 24),
        ('—á–∞—Å', 60 * 60),
        ('–º–∏–Ω—É—Ç—É', 60)
    ]
    result = []
    for period_name, period_seconds in periods:
        if seconds >= period_seconds:
            period_value, seconds = divmod(seconds, period_seconds)
            if period_value == 1:
                result.append(f"{period_value} {period_name}")
            else:
                result.append(f"{period_value} {period_name}{'–∞' if period_value > 1 else ''}")
    return ', '.join(result)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
def get_message_ids(chat_id):
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with connect_to_db("messages.db") as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        cursor = conn.cursor()
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("SELECT message_id FROM messages WHERE chat_id=?", (chat_id,))
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        return cursor.fetchall()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_message(chat_id, message_id):
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with connect_to_db("messages.db") as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        cursor = conn.cursor()
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("DELETE FROM messages WHERE chat_id=? AND message_id=?", (chat_id, message_id))
        # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≥—Ä—É–ø–ø—ã –ø–æ chat_id
def get_group_statistics_by_chat_id(chat_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()

        cursor.execute("SELECT chat_id, chat_name, creator_id, creator_username, active_users, language, message_count, bonus_count, word_count, warn_count, earn, hi_text, good_text FROM chats WHERE chat_id=?", (chat_id,))
        group_statistics = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
        if not group_statistics:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        return group_statistics
    except Exception as e:
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n‚Ä¢ {type(e).__name__}: {e}"
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id –∏ user_id
def get_user_statistics_by_chat_id(user_id, chat_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()

        cursor.execute("SELECT user_username, message_count, bonus_count, word_count, warn_count FROM users WHERE chat_id=? AND user_id=?", (chat_id, user_id,))
        user_statistics = cursor.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
        if not user_statistics:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        return user_statistics
    except Exception as e:
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n‚Ä¢ {type(e).__name__}: {e}"
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–µ—Ü

#–ö–æ–º–∞–Ω–¥—ã —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–æ

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/unwarn`, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@bot.message_handler(commands=['unwarn'])
def unwarn_user(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)
        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['unwarn']['formate']
        erroruser = data['commands'][language]['unwarn']['error']
        allow = data['commands'][language]['unwarn']['allow']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –Ω–µ–≥–æ
        if message.reply_to_message and message.reply_to_message.from_user:
            username = message.reply_to_message.from_user.username
        else:
            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "@", –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if len(message.text.split()) == 2:
                username = message.text.split()[1].lstrip('@')
            else:
                bot.send_message(chat_id, text=formate)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –±–æ—Ç—É
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_id = get_user_id_by_username(username, chat_id)
        user_status = bot.get_chat_member(chat_id, user_id).status
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if user_status not in ('creator'):
            delete_warncount_by_username(username, chat_id)
            delete_warncount_by_group(chat_id)
            bot.send_message(chat_id, f"{allow} @{username}")
        else:
            delete_warncount_by_username(username, chat_id)
            delete_warncount_by_group(chat_id)
            bot.send_message(chat_id, f"{allow} @{username}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=erroruser)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/warn`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç.
@bot.message_handler(commands=['warn'])
def warn_user(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['warn']['formate']
        erroruser = data['commands'][language]['warn']['error']
        allow = data['commands'][language]['warn']['allow']
        allow_reason = data['commands'][language]['warn']['reason']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –Ω–µ–≥–æ
        if message.reply_to_message and message.reply_to_message.from_user:
            username = message.reply_to_message.from_user.username
            reason = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
        else:
            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "@", –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if len(message.text.split()) > 1:
                username = message.text.split()[1].lstrip('@')
                reason = message.text.split(' ', 2)[2] if len(message.text.split()) > 2 else None
            else:
                bot.send_message(chat_id, text=formate)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –±–æ—Ç—É
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_id = get_user_id_by_username(username, chat_id)
        user_status = bot.get_chat_member(chat_id, user_id).status
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if user_status not in ('creator'):
            add_warncount_by_username(username, chat_id)
            add_warncount_by_group(chat_id)
            if reason:
                bot.send_message(chat_id, f"@{username}! {allow_reason} {reason}")
            else:
                bot.send_message(chat_id, f"@{username}! {allow_reason}")
        else:
            bot.send_message(chat_id, text=error)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=erroruser)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/mute`, –∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@bot.message_handler(commands=['mute'])
def mute_user(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['mute']['formate']
        time_formate = data['commands'][language]['mute']['time_formate']
        erroruser = data['commands'][language]['mute']['error']
        allow = data['commands'][language]['mute']['allow']
        ban = data['commands'][language]['mute']['ban_formate']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(message.text.split()) < 2:
            if not message.reply_to_message:
                bot.send_message(chat_id, text=formate)
                return
            else:
                # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞
                username = message.reply_to_message.from_user.username
                duration = 365*24*60*60  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 1 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            args = message.text.split()[1:]
            username = None
            duration = 0

            if args[0].startswith('@'):  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username
                username = args[0].lstrip('@')
                duration_args = args[1:]
            else:  # –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ —á–∞—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                duration_args = args

            for arg in duration_args:
                if arg.endswith('d'):
                    duration += int(arg[:-1]) * 24 * 60 * 60  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
                elif arg.endswith('h'):
                    duration += int(arg[:-1]) * 60 * 60  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                elif arg.endswith('m'):
                    duration += int(arg[:-1]) * 60  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                else:
                    bot.send_message(chat_id, text=time_formate)
                    return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –±–æ—Ç—É
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return


        # –ï—Å–ª–∏ username –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not username and message.reply_to_message:
            if message.reply_to_message.from_user.username:
                username = message.reply_to_message.from_user.username
            else:
                bot.send_message(chat_id, text=erroruser)
                return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_id_by_username(username, chat_id)
        user_status = bot.get_chat_member(chat_id, user_id).status
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if user_status not in ('creator', 'administrator'):
            bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
            formatted_duration = format_duration(duration)
            if not formatted_duration:
                formatted_duration = ban
                bot.send_message(chat_id, f"@{username}! {allow} {formatted_duration}.")
        else:
            bot.send_message(chat_id, text=error)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=erroruser)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/unmute`, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–º–∞–µ—Ç –∑–∞–≥–ª—É—à–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['unmute']['formate']
        fail = data['commands'][language]['unmute']['fail']
        erroruser = data['commands'][language]['unmute']['error']
        allow = data['commands'][language]['unmute']['allow']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(message.text.split()) < 2 and not message.reply_to_message:
            bot.send_message(chat_id, text=formate)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message.text.split()) >= 2:
            username = message.text.split()[1].lstrip('@')
        elif message.reply_to_message:
            if message.reply_to_message.from_user.username:
                username = message.reply_to_message.from_user.username
            else:
                bot.send_message(chat_id, text=fail)
                return
        else:
            bot.send_message(chat_id, text=fail)
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_id_by_username(username, chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –±–æ—Ç—É
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True,
                                can_send_other_messages=True, can_add_web_page_previews=True, until_date=0)
        bot.send_message(chat_id, f"@{username}! {allow}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–∞–≥–ª—É—à–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=erroruser)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/kick`, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['kick'])
def kick_user(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)


        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['kick']['formate']
        allow = data['commands'][language]['kick']['allow']
        areason = data['commands'][language]['kick']['reason']
        erroruser = data['commands'][language]['kick']['error']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –Ω–µ–≥–æ
        if message.reply_to_message and message.reply_to_message.from_user:
            username = message.reply_to_message.from_user.username
            reason = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
        else:
            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "@", –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if len(message.text.split()) > 1:
                username = message.text.split()[1].lstrip('@')
                reason = message.text.split(' ', 2)[2] if len(message.text.split()) > 2 else None
            else:
                bot.send_message(chat_id, text=formate)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —á–∞—Ç–∞
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return

        user_id = get_user_id_by_username(username, chat_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
        bot.kick_chat_member(chat_id, user_id)
        if reason:
            bot.send_message(chat_id, f"@{username}! {areason} {reason}")
        else:
            bot.send_message(chat_id, f"@{username}! {allow}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=erroruser)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/setrules`, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['setrules'])
def set_rules(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['setrules']['formate']
        allow = data['commands'][language]['setrules']['allow']
        fail = data['commands'][language]['setrules']['fail']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞
        if len(message.text.split()) < 2:
            bot.send_message(chat_id, text=formate)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        rules_text = message.text.split(maxsplit=1)[1]

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö rules.db
        conn = connect_to_db('rules.db')
        cursor = conn.cursor()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO group_rules (chat_id, rules_text) VALUES (?, ?)", (chat_id, rules_text))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, text=allow)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/editrules`, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['editrules'])
def edit_rules(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['editrules']['formate']
        allow = data['commands'][language]['editrules']['allow']
        fail = data['commands'][language]['editrules']['fail']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if len(message.text.split()) < 2:
            bot.send_message(chat_id, text=formate)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_rules_text = message.text.split(maxsplit=1)[1]

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö rules.db
        conn = connect_to_db('rules.db')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE group_rules SET rules_text=? WHERE chat_id=?", (new_rules_text, chat_id))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, text=allow)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/rules`, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç
@bot.message_handler(commands=['rules'])
def send_rules(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return

        language = get_chat_language(chat_id)
        no = data['commands'][language]['rules']['no']
        fail = data['commands'][language]['rules']['fail']
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö rules.db
        conn = connect_to_db('rules.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT rules_text FROM group_rules WHERE chat_id=?", (chat_id,))
        result = cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if result is None or result[0] == "":
            bot.send_message(chat_id, text=no)
            return

        rules_text = result[0]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç
        bot.send_message(chat_id, f"{rules_text}")

        conn.close()
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/promote`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['promote'])
def promote_user(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['promote']['formate']
        allow = data['commands'][language]['promote']['allow']
        admin = data['commands'][language]['promote']['fail']
        fail = data['commands'][language]['promote']['error']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.reply_to_message and message.reply_to_message.from_user:
            user_id = message.reply_to_message.from_user.id
            username = message.reply_to_message.from_user.username
        elif len(message.text.split()) > 1:
            username = message.text.split()[1].lstrip('@')
            user_id = get_user_id_by_username(username, chat_id)
        else:
            bot.send_message(chat_id, text=formate)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —á–∞—Ç–∞
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status not in ('creator', 'administrator'):
            # –ü–æ–≤—ã—à–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot.promote_chat_member(chat_id, user_id, can_change_info=True, can_delete_messages=True, can_invite_users=True, can_restrict_members=True, can_pin_messages=True, can_promote_members=False)
            bot.send_message(chat_id, f"@{username}! {allow}")
        else:
            bot.send_message(chat_id, text=admin)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/demote`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–∑–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['demote'])
def demote_user(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)
        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['demote']['formate']
        allow = data['commands'][language]['demote']['allow']
        admin = data['commands'][language]['demote']['fail']
        fail = data['commands'][language]['demote']['error']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.reply_to_message and message.reply_to_message.from_user:
            user_id = message.reply_to_message.from_user.id
            username = message.reply_to_message.from_user.username
        elif len(message.text.split()) > 1:
            username = message.text.split()[1].lstrip('@')
            user_id = get_user_id_by_username(username, chat_id)
        else:
            bot.send_message(chat_id, text=formate)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —á–∞—Ç–∞
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status in ('creator', 'administrator'):
            # –ü–æ–Ω–∏–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ–±—ã—á–Ω–æ–≥–æ
            bot.promote_chat_member(chat_id, user_id, can_change_info=False, can_delete_messages=False, can_invite_users=False, can_restrict_members=False, can_pin_messages=False, can_promote_members=False)
            bot.send_message(chat_id, f"@{username}! {allow}")
        else:
            bot.send_message(chat_id, f"@{username}! {admin}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/groupstats`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['groupstats'])
def group_statistics(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        fail = data['commands'][language]['groupstats']['fail']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≥—Ä—É–ø–ø—ã
        group_stats = get_group_statistics_by_chat_id(chat_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
        formatted_stats = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:\n\n" + "\n".join([f"üßë‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @{stats[3]}\nüë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{stats[4]}</b>\nüåé –Ø–∑—ã–∫ –≥—Ä—É–ø–ø—ã: <b>{'üá∑üá∫' if stats[5] == 'rus' else 'üá∫üá∏'}</b>\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{stats[6]}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{stats[8]}</b>\nüí† –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: <b>{round(stats[7], 2)}</b> Grand –±–æ–Ω—É—Å–æ–≤\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{stats[9]}</b>" for stats in group_stats])

        # –ï—Å–ª–∏ —è–∑—ã–∫ —á–∞—Ç–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        if language == "en":
            formatted_stats_en = f"Group Statistics:\n\n" + "\n".join([f"üßë‚Äçüíª Creator: @{stats[3]}\nüë• Active Users: <b>{stats[4]}</b>\nüåé Group Language: <b>{'üá∑üá∫' if stats[5] == 'rus' else 'üá∫üá∏'}</b>\nüí¨ Total Messages: <b>{stats[6]}</b>\nüìù Total Words: <b>{stats[8]}</b>\nüí† Earned by Users: <b>{round(stats[7], 2)}</b> Grand bonuses\n‚ö†Ô∏è Total Warnings: <b>{stats[9]}</b>" for stats in group_stats])
            bot.send_message(chat_id, formatted_stats_en, parse_mode="HTML")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç
            bot.send_message(chat_id, formatted_stats, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/stats`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['stats'])
def group_statistics(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        formate = data['commands'][language]['stats']['formate']
        fail = data['commands'][language]['stats']['fail']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –Ω–µ–≥–æ
        if message.reply_to_message and message.reply_to_message.from_user:
            username = message.reply_to_message.from_user.username
            reason = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
        else:
            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "@", –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if len(message.text.split()) > 1:
                username = message.text.split()[1].lstrip('@')
                reason = message.text.split(' ', 2)[2] if len(message.text.split()) > 2 else None
            else:
                bot.send_message(chat_id, text=formate)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —á–∞—Ç–∞
        if username == bot.get_me().username:
            bot.send_message(chat_id, text=bott)
            return

        user_id = get_user_id_by_username(username, chat_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = get_user_statistics_by_chat_id(user_id, chat_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
        formatted_stats = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{user_stats[0]}:\n\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_stats[1]}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{user_stats[3]}</b>\nüí† –í—Å–µ–≥–æ Grand –±–æ–Ω—É—Å–æ–≤: <b>{round(user_stats[2], 2)}</b>\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{user_stats[4]}</b>\n"

        # –ï—Å–ª–∏ —è–∑—ã–∫ —á–∞—Ç–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        if language == "en":
            formatted_stats_en = f"Stats @{user_stats[0]}:\n\nüí¨ Total messages: <b>{user_stats[1]}</b>\nüìù Total words: <b>{user_stats[3]}</b>\nüí† Total Grand bonuses: <b>{round(user_stats[2], 2)}</b>\n‚ö†Ô∏è Total warnings: <b>{user_stats[4]}</b>\n"
            bot.send_message(chat_id, formatted_stats_en, parse_mode="HTML")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç
            bot.send_message(chat_id, formatted_stats, parse_mode="HTML")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/top`, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–µ–¥–µ—Ç —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['top'])
def top_users(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        fail = data['commands'][language]['top']['fail']
        top = data['commands'][language]['top']['top']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–æ–ø–∞
        connection_users = connect_to_db('chat_data.db')
        cursor_users = connection_users.cursor()
        cursor_users.execute("SELECT user_id, message_count, user_username FROM users WHERE chat_id = ? ORDER BY message_count DESC LIMIT 30", (chat_id,))
        top_users = cursor_users.fetchall()
        chat_message = top

        for idx, user_data in enumerate(top_users, start=1):
            user_id = user_data[0]
            message_count = user_data[1]
            username = user_data[2]

            user_mention = username
            if language == "en":
                chat_message += f"{idx}üèÖ - @{user_mention}\n Number of üí¨: <b>{message_count}</b>\n\n"
            else:
                chat_message += f"{idx}üèÖ - @{user_mention}\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ üí¨: <b>{message_count}</b>\n\n"

        bot.send_message(chat_id, chat_message, parse_mode='HTML')

    except sqlite3.Error as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞: {e}"
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)
    finally:
        if 'cursor_users' in locals() and cursor_users is not None:
            cursor_users.close()
        if 'connection_users' in locals() and connection_users is not None:
            connection_users.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/help`, —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['help'])
def help_command(message):
    try:
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if message.chat.type not in ['group', 'supergroup']:
            return
        language = get_chat_language(chat_id)

        only_admin = data['commands'][language]['allow_text']
        bott = data['commands'][language]['bot_text']
        error = data['commands'][language]['error_text']
        fail = data['commands'][language]['help']['fail']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        if message.from_user.id not in [chat_member.user.id for chat_member in bot.get_chat_administrators(chat_id)]:
            bot.send_message(chat_id, text=only_admin)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º
        help_text = data['help_commands'][language]['help_text']
        help_text += data['help_commands'][language]['stats_commands']
        help_text += data['help_commands'][language]['groupstats_commands']
        help_text += data['help_commands'][language]['mute_commands']
        help_text += data['help_commands'][language]['unmute_commands']
        help_text += data['help_commands'][language]['kick_commands']
        help_text += data['help_commands'][language]['promote_commands']
        help_text += data['help_commands'][language]['demote_commands']
        help_text += data['help_commands'][language]['setrules_commands']
        help_text += data['help_commands'][language]['rules_commands']
        help_text += data['help_commands'][language]['editrules_commands']
        help_text += data['help_commands'][language]['warn_commands']
        help_text += data['help_commands'][language]['unwarn_commands']
        help_text += data['help_commands'][language]['top_commands']
        help_text += data['help_commands'][language]['help_commands']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
        bot.send_message(chat_id, help_text, parse_mode='HTML')

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –∂—É—Ä–Ω–∞–ª
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã help:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        logging.error(error_message)
        bot.send_message(chat_id, text=fail)

#–ö–æ–º–∞–Ω–¥—ã —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–µ—Ü

@bot.message_handler(commands=['spam'])
def spam(message):
    chat_id = message.chat.id 
    language = get_chat_language(chat_id)
    if message.reply_to_message:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        replied_user_id = message.reply_to_message.from_user.id
        try:
            # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—É—Ç–∫–∏
            bot.restrict_chat_member(message.chat.id, replied_user_id, until_date=time.time() + 86400)
            if language == "rus":
                bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∫–∞–∫ –°–ü–ê–ú. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –°–ü–ê–ú–û–ú, –±–æ–Ω—É—Å Grand –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\nüö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            else:
                bot.reply_to(message, f"‚úÖ Message sent for review!\n\nThis message has been marked as SPAM by a group member. If this message is SPAM, the Grand bonus will not be credited for the activity.\n\nüö´ User @{message.reply_to_message.from_user.username} is restricted from sending messages until verification is complete.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–º–∞–π–ª–∏–∫–æ–≤, —ç–º–æ–¥–∑–∏, HTML-—Ç–µ–≥–æ–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            cleaned_text = clean_message(message.reply_to_message.text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–∑–∞–ø–∏—Å–∞—Ç—å" –∏ "—É–¥–∞–ª–∏—Ç—å"
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="delete"),
                     InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å ‚úÖ", callback_data="write"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(-1002007478754, cleaned_text, reply_markup=keyboard)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ –∫–æ–º–∞–Ω–¥—É
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.reply_to_message.message_id)
        except Exception as e:
            print(f"Error: {e}")
            bot.reply_to(message, "‚ö†Ô∏è –Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n‚ö†Ô∏è I am unable to submit this message for verification.")
    else:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ –∫–æ–º–∞–Ω–¥—É
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"Error: {e}")
            bot.reply_to(message, "‚ö†Ô∏è –Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n‚ö†Ô∏è I am unable to submit this message for verification.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ 5 —Ü–∏—Ñ—Ä
def generate_code():
    return ''.join(random.choices('0123456789', k=5))




@bot.message_handler(func=lambda message: message.text in ["üí† G-–±–æ–Ω—É—Å", "üí† G-bonus"])
def grand_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            username = message.from_user.username
            user_language = get_user_language(chat_id)
            text = data['grand_bonus'][user_language]['1']
            text += data['grand_bonus'][user_language]['2']
            text += data['grand_bonus'][user_language]['3']
            text += data['grand_bonus'][user_language]['4']
            text += data['grand_bonus'][user_language]['5']

            if user_language == "en":
                photo = open('bw_EN.png', 'rb')
                keyboard = types.InlineKeyboardMarkup()
                url_enchat_button = types.InlineKeyboardButton(text="Going read! üìö", url="https://a.co/d/gJxsXqP")
                keyboard.add(url_enchat_button)
                bot.send_photo(chat_id, photo, caption=text, reply_markup=keyboard)
            else:
                photo = open('bw_RU.png', 'rb')
                keyboard = types.InlineKeyboardMarkup()
                url_ruschat_button = types.InlineKeyboardButton(text="–ò–¥—É —á–∏—Ç–∞—Ç—å! üìö", url="https://www.litres.ru/book/artur-grandi/grand-time-70005007/?lfrom=1117899162&ref_key=c640e512577d7235adb7f208059ba746eb3dd77dbbb2d48de86aa6ec141245fb&ref_offer=1")
                keyboard.add(url_ruschat_button)
                bot.send_photo(chat_id, photo, caption=text, reply_markup=keyboard)
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üí† GRAND –±–æ–Ω—É—Å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{message.from_user.username if message.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
conn = connect_to_db('active_chats.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS active_chats
                  (sender_id INTEGER PRIMARY KEY, recipient_id INTEGER, message INTEGER, message_id INTEGER, language INTEGER)''')
conn.commit()
conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def remove_active_chat(user_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM active_chats WHERE user_id = ?''', (user_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞–µ—Ç—Å—è
def get_active_chat(user_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT chat_id FROM active_chats WHERE user_id = ?''', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return result[0]
    else:
        return None


def send_new_buttons(language, chat_id):
    connection, cursor, user = initialize_database(chat_id)
    prefix = user[2]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    if language == 'rus':
        stats_button = types.KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")
        referrals_button = types.KeyboardButton("üíé –ù–∞–≥—Ä–∞–¥–∞")
        language_ru_button = types.KeyboardButton("üåé –Ø–∑—ã–∫")
        settings_ru_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        support_ru_button = types.KeyboardButton("üõ† –ü–æ–º–æ—â—å")
        grand_ru_button = types.KeyboardButton("üí† G-–±–æ–Ω—É—Å")
        keyboard.add(stats_button, referrals_button, language_ru_button, settings_ru_button, support_ru_button, grand_ru_button)
        if prefix == "free":
            sotrud_button = types.KeyboardButton("üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
            keyboard.add(sotrud_button)            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    elif language == 'en':
        keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        stats_button = types.KeyboardButton("üìä Statistics")
        referrals_button = types.KeyboardButton("üíé Rewards")
        language_en_button = types.KeyboardButton("üåé Language")
        settings_en_button = types.KeyboardButton("‚öôÔ∏è Settings")
        support_en_button = types.KeyboardButton("üõ† Support")
        grand_en_button = types.KeyboardButton("üí† G-bonus")
        keyboard.add(stats_button, referrals_button, language_en_button, settings_en_button, support_en_button, grand_en_button)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    
    return keyboard



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def create_keyboard_cancel(user_language):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    if user_language == "rus":
        cancel_button = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    else: 
        cancel_button = types.KeyboardButton("‚ùå Cancel")
    keyboard.add(cancel_button)
    return keyboard


@bot.message_handler(func=lambda message: message.text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚ùå Cancel"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            sender_id = message.from_user.id
            language_user = get_user_language(chat_id)
            new_keyboard = send_new_buttons(language_user, sender_id)
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            bot.delete_message(chat_id, message.message_id - 1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" –∏–ª–∏ "‚ùå Cance
            if language_user == "en":
                bot.send_message(sender_id, "You've cancelled your request to technical support! If you have any questions, we'll be waiting for you! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)
            else:
                bot.send_message(sender_id, "–¢—ã –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –±—É–¥–µ–º —Ç–µ–±—è –∂–¥–∞—Ç—å! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



def get_block_time(sender_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.

    Args:
        sender_id (INTEGER): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        datetime: –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω), –∏–Ω–∞—á–µ None
    """

    connection = connect_to_db('chat_data.db')
    cursor = connection.cursor()

    cursor.execute("""
        SELECT block_time
        FROM police
        WHERE sender_id = ? 
    """, (sender_id,))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    block_time_str = cursor.fetchone()

    connection.close()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
    if block_time_str:
        return datetime.strptime(block_time_str[0], '%Y-%m-%d %H:%M:%S.%f')
    else:
        return None

def get_active(chat_id):
    connection = connect_to_db('active_chats.db')
    cursor = connection.cursor()

    cursor.execute("""
        SELECT sender_id, recipient_id
        FROM active_chats
        WHERE sender_id = ? OR recipient_id = ?
    """, (chat_id, chat_id))

    result = cursor.fetchone()

    connection.close()

    return result is not None

def format_block_time(block_time):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.

    Args:
        block_time (datetime): –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
    """
    formatted_block_time = block_time.strftime("%d.%m.%Y %H:%M")
    return formatted_block_time


@bot.message_handler(func=lambda message: message.text in ["üõ† –ü–æ–º–æ—â—å", "üõ† Support"])
def support_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            username = message.from_user.username
            user_language = get_user_language(chat_id)
            keyboard_cancel = create_keyboard_cancel(user_language)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            block_time = get_block_time(chat_id)
            active_chat = get_active(chat_id)
            if block_time:
                formatted_block_time = block_time.strftime("%d.%m.%Y %H:%M")
                formatted_block_time_en = block_time.strftime("%m/%d/%Y %I:%M %p")
                if user_language == "en":
                    block_message = f"The feature is not available for you until  {formatted_block_time_en}."
                else:
                     block_message = f"–î–ª—è —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ {formatted_block_time}."                   
                bot.send_message(chat_id, block_message)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if user_language == "en":
                    bot.send_message(chat_id, " If you have any questions or problems, don't hesitate to share them with us! Our technical service is ready to help you find a solution. We will try to offer you the best solution.\n\n<b>Describe your problem or question in detail and send it to me!</b>", reply_markup=keyboard_cancel, parse_mode="HTML")
                else:
                    bot.send_message(chat_id, " –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –Ω–∞–º–∏! –ù–∞—à–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n<b>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ!</b>", reply_markup=keyboard_cancel, parse_mode="HTML")

                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                bot.register_next_step_handler(message, process_user_message, language_user=user_language, sender_id=chat_id)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ' –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: {username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        






def process_user_message(message, language_user, sender_id):
    try:
        new_keyboard = send_new_buttons(language_user, sender_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" –∏–ª–∏ "‚ùå Cancel"
        if "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" in message.text or "‚ùå Cancel" in message.text:

            if language_user == "en":
                bot.send_message(sender_id, "You've cancelled your request to technical support! If you have any questions, we'll be waiting for you! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)
            else:
                bot.send_message(sender_id, "–¢—ã –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –±—É–¥–µ–º —Ç–µ–±—è –∂–¥–∞—Ç—å! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

        keyboard = InlineKeyboardMarkup()
        if language_user == "rus":
            keyboard.row(InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_message_rus'),
                         InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_message_rus'))
        else:
            keyboard.row(InlineKeyboardButton("üì§ Send", callback_data='send_message_en'),
                         InlineKeyboardButton("‚úèÔ∏è Edit", callback_data='edit_message_en'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        sent_message = bot.send_message(message.chat.id, message.text, reply_markup=keyboard)

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.chat.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        



@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_message'))
def edit_message_callback(call):
    if call.data.endswith('_rus'):
        language = "rus"
    else:
        language = "en"

    if language == "rus":
        edit_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    else: 
        edit_text = "Enter a new message:"
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=edit_text)

    # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.register_next_step_handler(call.message, process_edited_message, language_user=language, sender_id=call.message.chat.id)

def process_edited_message(message, language_user, sender_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" –∏–ª–∏ "‚ùå Cancel"
        if "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" in message.text or "‚ùå Cancel" in message.text:
            new_keyboard = send_new_buttons(language_user, sender_id)
            if language_user == "en":
                bot.send_message(sender_id, "You've cancelled your request to technical support! If you have any questions, we'll be waiting for you! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)
            else:
                bot.send_message(sender_id, "–¢—ã –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –±—É–¥–µ–º —Ç–µ–±—è –∂–¥–∞—Ç—å! üõ†Ô∏è‚ùì", reply_markup=new_keyboard)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

        keyboard = InlineKeyboardMarkup()
        if language_user == "rus":
            keyboard.row(InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_message_rus'),
                         InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_message_rus'))
        else:
            keyboard.row(InlineKeyboardButton("üì§ Send", callback_data='send_message_en'),
                         InlineKeyboardButton("‚úèÔ∏è Edit", callback_data='edit_message_en'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        sent_message = bot.send_message(message.chat.id, message.text, reply_markup=keyboard)

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.chat.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        







def save_to_database(sender_id, message_id, message, language, recipient_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO active_chats (sender_id, message_id, recipient_id, message, language) VALUES (?, ?, ?, ?, ?)''', (sender_id, message_id, recipient_id, message, language))
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'send_message_en')
def send_message_callback(call):
    try:
        language_user = "en"
        sender_id = call.message.chat.id
        username = call.from_user.username or call.from_user.first_name
        fq = call.message.text
        new_keyboard = send_new_buttons(language_user, sender_id)
        text = f"üá∫üá∏ @{username} ({sender_id})\n\n{fq}"
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ"
        bot.edit_message_text("Your message has been sent.üì¨ Our team will contact you shortly.üë®‚Äçüíª", call.message.chat.id, call.message.message_id)
        bot.send_message(sender_id, "Request in queue", reply_markup=new_keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("Reject ‚ùå", callback_data=f'reject_{call.message.message_id}'),
                     InlineKeyboardButton("Accept ‚úÖ", callback_data=f'accept_{call.message.message_id}'))

        bot.send_message(-1002130493902, text=text, reply_markup=keyboard)

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_to_database(call.message.chat.id, call.message.message_id, message=call.message.text, recipient_id=username, language="en")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.message.chat.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        

@bot.callback_query_handler(func=lambda call: call.data == 'send_message_rus')
def send_message_callback(call):
    try:
        language_user = "rus"
        sender_id = call.message.chat.id
        username = username = call.from_user.username or call.from_user.first_name
        fq = call.message.text
        new_keyboard = send_new_buttons(language_user, sender_id)
        text = f"üá∑üá∫ @{username} ({sender_id})\n\n{fq}"
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ"
        bot.edit_message_text("–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.üì¨ –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.üë®‚Äçüíª", call.message.chat.id, call.message.message_id)
        bot.send_message(sender_id, "–ó–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏", reply_markup=new_keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f'reject_{call.message.message_id}'),
                     InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f'accept_{call.message.message_id}'))

        bot.send_message(-1002130493902, text=text, reply_markup=keyboard)

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_to_database(call.message.chat.id, call.message.message_id, message=call.message.text, recipient_id=username, language="rus")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.message.chat.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        


def get_chat_info_help(message_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT sender_id, message, recipient_id, language FROM active_chats WHERE message_id = ?''', (message_id,))
    chat_info = cursor.fetchone()
    conn.close()
    return chat_info

def get_support_entry(support_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()

    # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ support_id
    cursor.execute("SELECT * FROM support WHERE support_id=?", (support_id,))
    entry = cursor.fetchone()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    return entry

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_callback(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ callback_data
        message_id = int(call.data.split('_')[1])
        support_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name
        support_data = get_support_entry(support_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º message_id
        conn = connect_to_db('active_chats.db')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM active_chats WHERE recipient_id = ?''', (support_id,))
        existing_entry = cursor.fetchone()
        conn.close()



        # –ü–æ–ª—É—á–∞–µ–º sender_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ message_id
        conn = connect_to_db('active_chats.db')
        cursor = conn.cursor()
        cursor.execute('''SELECT sender_id, message, language, recipient_id FROM active_chats WHERE message_id = ?''', (message_id,))
        result = cursor.fetchone()
        conn.close()

        if result:
                sender_id = result[0]
                text = result[1]
                language = result[2]
                recipient_id = result[3]
                rej_keyboard = reject_keyboard()
                if language == "rus":
                    lan = "üá∑üá∫"
                else:
                    lan = "üá∫üá∏"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
                edit_text = f"{lan} @{recipient_id} ({sender_id})\n\n{text}\n\nüõ†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) @{username}!"
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=edit_text)

                conn = connect_to_db('active_chats.db')
                cursor = conn.cursor()
                cursor.execute('''DELETE FROM active_chats WHERE sender_id = ?''', (sender_id,))
                conn.commit()
                conn.close()

        else:
                bot.send_message(call.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.from_user.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        logging.error(error_message)
        bot.send_message(call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")

        # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(error_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def reject_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    reject_with_reason = types.KeyboardButton("–ü–æ –ø—Ä–∏—á–∏–Ω–µ üëÆ")
    reject_without_reasont = types.KeyboardButton("–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã ‚ùå")
    keyboard.add(reject_with_reason, reject_without_reasont)
    return keyboard

def process_reject_message(message):
    try:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_reject'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        sent_message = bot.send_message(message.chat.id, message.text, reply_markup=keyboard)

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {message.chat.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        

@bot.callback_query_handler(func=lambda call: call.data == 'send_reject')
def send_reject_callback(call):
    try:
        recipient_id = call.message.chat.id
        sender_id = recipient_id
        language_user = "rus"
        new_keyboard = send_new_buttons(language_user, sender_id)
        message = call.message.text

        # –ü–æ–ª—É—á–∞–µ–º sender_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ message_id
        conn = connect_to_db('active_chats.db')
        cursor = conn.cursor()
        cursor.execute('''SELECT sender_id, language FROM active_chats WHERE recipient_id = ?''', (recipient_id,))
        result = cursor.fetchone()
        conn.close()

        if result:
            senderto_id = result[0]
            language_users = result[1]
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(sender_id, f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n\n {message}", reply_markup=new_keyboard)
            if language_users == "en":
                bot.send_message(senderto_id, f"‚õîÔ∏è Your request has been rejected for the following reason: {message}")
            else: 
                bot.send_message(senderto_id, f"‚õîÔ∏è –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {message}")

            conn = connect_to_db('active_chats.db')
            cursor = conn.cursor()
            cursor.execute('''DELETE FROM active_chats WHERE sender_id = ?''', (senderto_id,))
            conn.commit()
            conn.close()
        else:
            bot.send_message(recipient_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.message.chat.id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.message_handler(func=lambda message: message.text in ["–ü–æ –ø—Ä–∏—á–∏–Ω–µ üëÆ"])
def reject_with_reasont_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = message.from_user.id
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ!")
            bot.register_next_step_handler(message, process_reject_message)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.message_handler(func=lambda message: message.text in ["–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã ‚ùå"])
def reject_without_reasont_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = message.from_user.id
            language_user = "rus"
            sender_id = recipient_id
            new_keyboard = send_new_buttons(language_user, sender_id)

            # –ü–æ–ª—É—á–∞–µ–º sender_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ message_id
            conn = connect_to_db('active_chats.db')
            cursor = conn.cursor()
            cursor.execute('''SELECT sender_id, language FROM active_chats WHERE recipient_id = ?''', (recipient_id,))
            result = cursor.fetchone()
            conn.close()

            if result:
                senderto_id = result[0]
                language_users = result[1]
                bot.delete_message(chat_id, message.message_id - 1)
                bot.send_message(sender_id, "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã!", reply_markup=new_keyboard)
                if language_users == "rus":
                    bot.send_message(senderto_id, "‚õîÔ∏è –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã")
                else:
                    bot.send_message(senderto_id, "‚õîÔ∏è Your request has been rejected without giving a reason")

                conn = connect_to_db('active_chats.db')
                cursor = conn.cursor()
                cursor.execute('''DELETE FROM active_chats WHERE sender_id = ?''', (senderto_id,))
                conn.commit()
                conn.close()

            else:
                bot.send_message(recipient_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

        
        bot.reply_to(message, (
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –í–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, "
            "–Ω–æ –Ω–∞—à —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏, –º—ã —Å–æ–æ–±—â–∏–º –æ –ª—é–±—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "‚ö†Ô∏è Sorry for the inconvenience! There was a technical problem, "
            "but our developer is already working on its solution. "
            "Please stay tuned, we will let you know about any updates."
        ))


@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_'))
def accept_callback(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ callback_data
        message_id = int(call.data.split('_')[1])
        support_id = call.from_user.id
        support_data = get_support_entry(support_id)
        username = call.from_user.username or call.from_user.first_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º message_id
        conn = connect_to_db('active_chats.db')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM active_chats WHERE recipient_id = ?''', (support_id,))
        existing_entry = cursor.fetchone()
        conn.close()




        # –ü–æ–ª—É—á–∞–µ–º sender_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ message_id
        conn = connect_to_db('active_chats.db')
        cursor = conn.cursor()
        cursor.execute('''SELECT sender_id, message, language, recipient_id FROM active_chats WHERE message_id = ?''', (message_id,))
        result = cursor.fetchone()
        conn.close()

        if result:
                sender_id = result[0]
                text = result[1]
                recipient_id = result[3]
                language_user = result[2]
                support = support_data[0]
                sup_name = support_data[1]
                sup_balance = support_data[2]
                like = support_data[3]
                dislike = support_data[4]
                code = support_data[5]
                if language_user == "rus":
                    lan = "üá∑üá∫"
                else:
                    lan = "üá∫üá∏"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ª–∏—á–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                keyboard_sender = create_keyboard_sender(language_user)
                if language_user == "rus":
                    bot.send_message(sender_id, f"üõ†Ô∏è –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª–∏! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: @{username}")
                else: 
                    bot.send_message(sender_id, f"üõ†Ô∏è Your request has been accepted! Specialist: @{username}")
                keyboard_recipient = create_keyboard_recipient()
                edit_text = f"{lan} @{recipient_id} ({sender_id})\n\n{text}\n\nüõ†Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª(–∞) @{username}!"
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=edit_text)

        else:
                bot.send_message(call.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {call.from_user.id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        logging.error(error_message)
        bot.send_message(call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")

        # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(error_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def rank_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    dislike = types.KeyboardButton("üëé")
    like = types.KeyboardButton("üëç")
    keyboard.add(dislike, like)
    return keyboard



def delete_chat(sender_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM active_chats WHERE sender_id = ?''', (sender_id, ))
    conn.commit()
    conn.close()

def get_recipient_like(sender_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT recipient_id FROM active_chats WHERE sender_id = ?''', (sender_id,))
    recipient_id = cursor.fetchone()
    conn.close()
    
    return recipient_id[0] if recipient_id else None

def get_sender_like(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT sender_id FROM active_chats WHERE sender_id = ?''', (chat_id,))
    sender_id = cursor.fetchone()
    conn.close()
    
    return sender_id[0] if sender_id else None


def increment_like_count(recipient_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''UPDATE support SET like = like + 1 WHERE support_id = ?''', (recipient_id,))
    conn.commit()
    conn.close()

def send_new_buttons_recipient(language, chat_id):
    connection, cursor, user = initialize_database(chat_id)
    prefix = user[2]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    if language == 'rus':
        stats_button = types.KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")
        referrals_button = types.KeyboardButton("üíé –ù–∞–≥—Ä–∞–¥–∞")
        language_ru_button = types.KeyboardButton("üåé –Ø–∑—ã–∫")
        settings_ru_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        support_ru_button = types.KeyboardButton("üõ† –ü–æ–º–æ—â—å")
        grand_ru_button = types.KeyboardButton("üí† G-–±–æ–Ω—É—Å")
        keyboard.add(stats_button, referrals_button, language_ru_button, settings_ru_button, support_ru_button, grand_ru_button)
        if prefix == "free":
            sotrud_button = types.KeyboardButton("üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
            keyboard.add(sotrud_button)            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    elif language == 'en':
        keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        stats_button = types.KeyboardButton("üìä Statistics")
        referrals_button = types.KeyboardButton("üíé Rewards")
        language_en_button = types.KeyboardButton("üåé Language")
        settings_en_button = types.KeyboardButton("‚öôÔ∏è Settings")
        support_en_button = types.KeyboardButton("üõ† Support")
        grand_en_button = types.KeyboardButton("üí† G-bonus")
        keyboard.add(stats_button, referrals_button, language_en_button, settings_en_button, support_en_button, grand_en_button)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    
    return keyboard

@bot.message_handler(func=lambda message: message.text in ["üëç"])
def like_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            language_user = get_user_language(chat_id)
            sender_id = get_sender_like(chat_id)
            recipient_id = get_recipient_like(sender_id)
            lk_keyboard = send_new_buttons(language_user, sender_id)
            language = "rus"
            new_key = send_new_buttons_recipient(language, recipient_id)
            if language_user == "rus":
                bot.send_message(sender_id, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–º–æ—â–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!", reply_markup=lk_keyboard)
            else:
                bot.send_message(sender_id, "Thank you for appreciating the expert help!", reply_markup=lk_keyboard)
            bot.send_message(recipient_id, f"–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á–∞—Ç —Å {sender_id} ‚úÖ\n\n–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏ üëç", reply_markup=new_key)
            increment_like_count(recipient_id)
            delete_chat(sender_id)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    

def increment_dislike_count(recipient_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''UPDATE support SET dislike = dislike + 1 WHERE support_id = ?''', (recipient_id,))
    conn.commit()
    conn.close()

@bot.message_handler(func=lambda message: message.text in ["üëé"])
def like_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            language_user = get_user_language(chat_id)
            sender_id = get_sender_like(chat_id)
            recipient_id = get_recipient_like(sender_id)
            lk_keyboard = send_new_buttons(language_user, sender_id)
            language = "rus"
            new_key = send_new_buttons_recipient(language, recipient_id)
            if language_user == "rus":
                bot.send_message(sender_id, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–º–æ—â–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!", reply_markup=lk_keyboard)
            else:
                bot.send_message(sender_id, "Thank you for appreciating the expert help!", reply_markup=lk_keyboard)
            bot.send_message(recipient_id, f"–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á–∞—Ç —Å {sender_id} ‚úÖ\n\n–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏ üëé", reply_markup=new_key)
            increment_dislike_count(recipient_id)
            delete_chat(sender_id)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–º–æ—â—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

def get_recipient(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT recipient_id FROM active_chats WHERE recipient_id = ?''', (chat_id,))
    recipient_id = cursor.fetchone()
    conn.close()
    
    return recipient_id[0] if recipient_id else None

def get_sender(recipient_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT sender_id FROM active_chats WHERE recipient_id = ?''', (recipient_id,))
    sender_id = cursor.fetchone()
    conn.close()
    
    return sender_id[0] if sender_id else None

def get_recipient_to(sender_id_to):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT recipient_id FROM active_chats WHERE sender_id = ?''', (sender_id_to,))
    recipient_id = cursor.fetchone()
    conn.close()
    
    return recipient_id[0] if recipient_id else None

def get_sender_to(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT sender_id FROM active_chats WHERE sender_id = ?''', (chat_id,))
    sender_id = cursor.fetchone()
    conn.close()
    
    return sender_id[0] if sender_id else None

def send_new_buttons_sender_id_to(language, chat_id):
    connection, cursor, user = initialize_database(chat_id)
    prefix = user[2]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    if language == 'rus':
        stats_button = types.KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")
        referrals_button = types.KeyboardButton("üíé –ù–∞–≥—Ä–∞–¥–∞")
        language_ru_button = types.KeyboardButton("üåé –Ø–∑—ã–∫")
        settings_ru_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        support_ru_button = types.KeyboardButton("üõ† –ü–æ–º–æ—â—å")
        grand_ru_button = types.KeyboardButton("üí† G-–±–æ–Ω—É—Å")
        keyboard.add(stats_button, referrals_button, language_ru_button, settings_ru_button, support_ru_button, grand_ru_button)
        if prefix == "free":
            sotrud_button = types.KeyboardButton("üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
            keyboard.add(sotrud_button)            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    elif language == 'en':
        keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        stats_button = types.KeyboardButton("üìä Statistics")
        referrals_button = types.KeyboardButton("üíé Rewards")
        language_en_button = types.KeyboardButton("üåé Language")
        settings_en_button = types.KeyboardButton("‚öôÔ∏è Settings")
        support_en_button = types.KeyboardButton("üõ† Support")
        grand_en_button = types.KeyboardButton("üí† G-bonus")
        keyboard.add(stats_button, referrals_button, language_en_button, settings_en_button, support_en_button, grand_en_button)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    
    return keyboard

def send_new_buttons_sender_id_to(language, chat_id):
    connection, cursor, user = initialize_database(chat_id)
    prefix = user[2]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    if language == 'rus':
        stats_button = types.KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")
        referrals_button = types.KeyboardButton("üíé –ù–∞–≥—Ä–∞–¥–∞")
        language_ru_button = types.KeyboardButton("üåé –Ø–∑—ã–∫")
        settings_ru_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        support_ru_button = types.KeyboardButton("üõ† –ü–æ–º–æ—â—å")
        grand_ru_button = types.KeyboardButton("üí† G-–±–æ–Ω—É—Å")
        keyboard.add(stats_button, referrals_button, language_ru_button, settings_ru_button, support_ru_button, grand_ru_button)
        if prefix == "free":
            sotrud_button = types.KeyboardButton("üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
            keyboard.add(sotrud_button)            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    elif language == 'en':
        keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        stats_button = types.KeyboardButton("üìä Statistics")
        referrals_button = types.KeyboardButton("üíé Rewards")
        language_en_button = types.KeyboardButton("üåé Language")
        settings_en_button = types.KeyboardButton("‚öôÔ∏è Settings")
        support_en_button = types.KeyboardButton("üõ† Support")
        grand_en_button = types.KeyboardButton("üí† G-bonus")
        keyboard.add(stats_button, referrals_button, language_en_button, settings_en_button, support_en_button, grand_en_button)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id in allowed_users:
            bd_button = types.KeyboardButton("üåê –ë–∞–∑–∞")
            staff_commands_button = types.KeyboardButton("üìù –ö–æ–º–∞–Ω–¥—ã")
            info_button = types.KeyboardButton("üëÅ‚Äçüó® Info")
            if chat_id == 1858164732:
                ad_button = types.KeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞")
                keyboard.add(bd_button, staff_commands_button, info_button, ad_button)
            else:
                keyboard.add(bd_button, staff_commands_button, info_button)
    
    return keyboard

def delete_chats(sender_id_to):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM active_chats WHERE sender_id = ?''', (sender_id_to, ))
    conn.commit()
    conn.close()

def get_recipient(user_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT recipient_id FROM active_chats WHERE recipient_id = ?''', (user_id,))
    recipient_id = cursor.fetchone()
    conn.close()
    
    return recipient_id[0] if recipient_id else None

def get_sender_language(sender_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT language FROM active_chats WHERE sender_id = ?''', (sender_id,))
    recipient_id = cursor.fetchone()
    conn.close()
    
    return recipient_id[0] if recipient_id else None


@bot.message_handler(func=lambda message: message.text in ["üîá –ó–∞–≤–µ—Ä—à–∏—Ç—å", "üîá End"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            language_user = get_user_language(chat_id)
            recipient_id = get_recipient(chat_id)
            sender_id = get_sender(recipient_id)
            sender_id_to = get_sender_to(chat_id)
            language_sender = get_sender_language(sender_id)
            recipient_id_to = get_recipient_to(sender_id_to)
            rk_keyboard = rank_keyboard()
            language = "rus"
            lk_keyboard = send_new_buttons_recipient(language, recipient_id)
            sender_keyboard = send_new_buttons_sender_id_to(language_user, sender_id_to)
            recipient_keyboard = send_new_buttons_sender_id_to(language, recipient_id_to)
        if sender_id: # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            if language_sender == "rus":
                bot.send_message(sender_id, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å —Ç–æ–±–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–º–æ—â–∏! üõ†Ô∏è", reply_markup=rk_keyboard)
            else:
                bot.send_message(sender_id, "The technician has finished chatting with you. Please rate the quality of help! üõ†Ô∏è", reply_markup=rk_keyboard)
            bot.send_message(recipient_id, f"–û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ({sender_id})")
        else:
            bot.send_message(recipient_id_to, f"{sender_id_to}, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å —Ç–æ–±–æ–π. üëã",reply_markup=recipient_keyboard)
            if language_user == "rus":
                bot.send_message(sender_id_to, f"–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á–∞—Ç —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏! ‚úÖ  –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!", reply_markup=sender_keyboard)
            else:
                bot.send_message(sender_id_to, f"You have completed a chat with a technical support staff member! ‚úÖ Thank you for contacting us!", reply_markup=sender_keyboard)
            delete_chats(sender_id_to)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîá –ó–∞–≤–µ—Ä—à–∏—Ç—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.message_handler(func=lambda message: message.text in ["üëÆ‚Äç‚ôÄÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = get_recipient(chat_id)
            sender_id = get_sender(recipient_id)
            sender_id_to = get_sender_to(chat_id)
            recipient_id_to = get_recipient_to(sender_id_to)
            language = "rus"
            police = create_keyboard_police()
            bot.send_message(recipient_id, f"–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",reply_markup=police)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üëÆ‚Äç‚ôÄÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)



def check_expired_users():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö, –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ.
    """

    connection = connect_to_db('chat_data.db')
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT sender_id, block_time FROM police")
    blocked_users = cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, block_time_str in blocked_users:
        block_time = datetime.strptime(block_time_str, '%Y-%m-%d %H:%M:%S.%f') # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
        if current_time > block_time:
            # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM police WHERE sender_id = ?", (user_id,))
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    connection.commit()
    connection.close()

def block_user(sender_id, block_time):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "police".

    Args:
        sender_id (INTEGER): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        block_time (timedelta): –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (timedelta –æ–±—ä–µ–∫—Ç)
    """

    connection = connect_to_db('chat_data.db')
    cursor = connection.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    cursor.execute("""
        CREATE TRIGGER IF NOT EXISTS reset_block_time AFTER INSERT ON police
        BEGIN
            UPDATE police
            SET block_time = NULL
            WHERE datetime('now') > block_time;
        END;
    """)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now()

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    end_time = current_time + block_time

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("""
        INSERT INTO police (sender_id, block_time)
        VALUES (?, ?)
    """, (sender_id, end_time))

    connection.commit()
    connection.close()


@bot.message_handler(func=lambda message: message.text in ["‚ö°Ô∏è –î–µ–Ω—å"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = get_recipient(chat_id)
            sender_id = get_sender(recipient_id)
            sender_id_to = get_sender_to(chat_id)
            recipient_id_to = get_recipient_to(sender_id_to)
            language_user = get_sender_language(sender_id)
            language = "rus"
            block_time = timedelta(days=1)
            lk_keyboard = send_new_buttons_recipient(language, recipient_id)
            sender_keyboard = send_new_buttons_sender_id_to(language_user, sender_id_to)
            end_time = (datetime.now() + block_time).strftime("%d.%m.%Y %H:%M")
            end_en_time = (datetime.now() + block_time).strftime("%m/%d/%Y %I:%M %p")
            if language_user == "rus":
                bot.send_message(sender_id, f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å —Ç–æ–±–æ–π. üõ†Ô∏è –ù–∞ —Ç–µ–±—è –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ {end_time}.", reply_markup=sender_keyboard)
            else:
                bot.send_message(sender_id, f"The technician has finished chatting with you. üõ†Ô∏è You are restricted from using technical support until {end_en_time}.", reply_markup=sender_keyboard)
            bot.send_message(recipient_id, f"–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 –¥–µ–Ω—å.",reply_markup=lk_keyboard)
            block_user(sender_id, block_time)
            delete_chats(sender_id_to)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ö°Ô∏è –î–µ–Ω—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.message_handler(func=lambda message: message.text in ["‚ö°Ô∏è –ù–µ–¥–µ–ª—è"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = get_recipient(chat_id)
            sender_id = get_sender(recipient_id)
            sender_id_to = get_sender_to(chat_id)
            recipient_id_to = get_recipient_to(sender_id_to)
            language_user = get_sender_language(sender_id)
            language = "rus"
            block_time = timedelta(days=7)
            lk_keyboard = send_new_buttons_recipient(language, recipient_id)
            sender_keyboard = send_new_buttons_sender_id_to(language_user, sender_id_to)
            end_time = (datetime.now() + block_time).strftime("%d.%m.%Y %H:%M")
            end_en_time = (datetime.now() + block_time).strftime("%m/%d/%Y %I:%M %p")
            if language_user == "rus":
                bot.send_message(sender_id, f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å —Ç–æ–±–æ–π. üõ†Ô∏è –ù–∞ —Ç–µ–±—è –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ {end_time}.", reply_markup=sender_keyboard)
            else:
                bot.send_message(sender_id, f"The technician has finished chatting with you. üõ†Ô∏è You are restricted from using technical support until {end_en_time}.", reply_markup=sender_keyboard)
            bot.send_message(recipient_id, f"–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 7 –¥–Ω–µ–π.",reply_markup=lk_keyboard)
            block_user(sender_id, block_time)
            delete_chats(sender_id_to)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ö°Ô∏è –ù–µ–¥–µ–ª—è':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


@bot.message_handler(func=lambda message: message.text in ["‚ö°Ô∏è –ú–µ—Å—è—Ü"])
def cancel_buttons_handler(message):
    try:
        if message.chat.type == "private":
            chat_id = message.from_user.id
            recipient_id = get_recipient(chat_id)
            sender_id = get_sender(recipient_id)
            sender_id_to = get_sender_to(chat_id)
            recipient_id_to = get_recipient_to(sender_id_to)
            language_user = get_sender_language(sender_id)
            language = "rus"
            block_time = timedelta(days=30)
            lk_keyboard = send_new_buttons_recipient(language, recipient_id)
            sender_keyboard = send_new_buttons_sender_id_to(language_user, sender_id_to)
            end_time = (datetime.now() + block_time).strftime("%d.%m.%Y %H:%M")
            end_en_time = (datetime.now() + block_time).strftime("%m/%d/%Y %I:%M %p")
            if language_user == "rus":
                bot.send_message(sender_id, f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å —Ç–æ–±–æ–π. üõ†Ô∏è –ù–∞ —Ç–µ–±—è –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ {end_time}.", reply_markup=sender_keyboard)
            else:
                bot.send_message(sender_id, f"The technician has finished chatting with you. üõ†Ô∏è You are restricted from using technical support until {end_en_time}.", reply_markup=sender_keyboard)
            bot.send_message(recipient_id, f"–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 30 –¥–Ω–µ–π.",reply_markup=lk_keyboard)
            block_user(sender_id, block_time)
            delete_chats(sender_id_to)


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ö°Ô∏è –ú–µ—Å—è—Ü':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @username\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def create_keyboard_recipient():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    police_button = types.KeyboardButton("üëÆ‚Äç‚ôÄÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
    close_call_rus_button = types.KeyboardButton("üîá –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    keyboard.add(police_button, close_call_rus_button)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def create_keyboard_police():
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    day_button = types.KeyboardButton("‚ö°Ô∏è –î–µ–Ω—å")
    week_button = types.KeyboardButton("‚ö°Ô∏è –ù–µ–¥–µ–ª—è")
    month_button = types.KeyboardButton("‚ö°Ô∏è –ú–µ—Å—è—Ü")
    keyboard.add(day_button, week_button, month_button)
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def create_keyboard_sender(language_user):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    if language_user == "rus":
        close_call_rus_button = types.KeyboardButton("üîá –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    else:
        close_call_rus_button = types.KeyboardButton("üîá End") 
    keyboard.add(close_call_rus_button)
    return keyboard





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø–ø
def show_group_buttons(chat_id):
    try:
        current_language = get_user_language(chat_id)
        language = current_language
        conn, cursor = create_connection()
        cursor.execute("SELECT DISTINCT chat_id, chat_name FROM users WHERE user_id=?", (chat_id,))
        groups = cursor.fetchall()
        keyboard = types.InlineKeyboardMarkup()
        if language == "rus":
            keyboard.row(types.InlineKeyboardButton("–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="all_stats"))
        else:
            keyboard.row(types.InlineKeyboardButton("All statistics", callback_data="all_stats"))
        for group in groups:
            keyboard.row(types.InlineKeyboardButton(group[1], callback_data=f"group_{group[0]}"))
        return keyboard
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{chat_id.from_user.username if chat_id.from_user else 'N/A'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

@bot.callback_query_handler(func=lambda call: call.data == 'back_profile_to_groups')
def back_to_groups_callback_handler(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if call.message.chat.type == "private":
            user_id = call.from_user.id
            username = call.from_user.username
            button_pressed = call.data
            current_language = get_user_language(user_id)
            language = current_language
            conn, cursor = create_connection()
            cursor.execute("SELECT SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE user_id=?", (user_id,))
            user_stats = cursor.fetchone()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if language == "rus":
                total_stats_message = f"üöÄ –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≥—Ä—É–ø–ø–∞—Ö. üåü"
            else:
                total_stats_message = f"üöÄ Here you will find your own stats to help you track your progress in the groups. üåü"
            keyboard = show_group_buttons(user_id)
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=total_stats_message, reply_markup=keyboard)

        else:
            pass
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìä –ü—Ä–æ—Ñ–∏–ª—å - –Ω–∞–∑–∞–¥':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text in ["üìä –ü—Ä–æ—Ñ–∏–ª—å", "üìä Statistics"])
def stats_button_handler(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if message.chat.type == "private":
            user_id = message.from_user.id
            chat_id = message.from_user.id
            username = message.from_user.username
            current_language = get_user_language(user_id)
            language = current_language
            conn, cursor = create_connection()
            cursor.execute("SELECT SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE user_id=?", (user_id,))
            user_stats = cursor.fetchone()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_stats and not all(value is None for value in user_stats):
                if language == "rus":
                    total_stats_message = f"üöÄ –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≥—Ä—É–ø–ø–∞—Ö. üåü"
                else:
                    total_stats_message = f"üöÄ Here you will find your own stats to help you track your progress in the groups. üåü"
                keyboard = show_group_buttons(user_id)
                bot.send_message(user_id, total_stats_message, reply_markup=keyboard)
            else:
                if language == "rus":
                    stats_no = f"–£–ø—Å! –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –≥–¥–µ –µ—Å—Ç—å Grand Moderator, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å grand! üí™üöÄ"
                else:
                    stats_no = f"Oops, you don't have stats yet. Join our group with Grand Moderator to start earning bonus GRAND! üí™üöÄ "
                keyboard = types.InlineKeyboardMarkup()
                if language == "rus":
                    stats_no_button = types.InlineKeyboardButton("üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üöÄ", url="https://t.me/chatgrandtime/")
                else:
                    stats_no_button = types.InlineKeyboardButton("üöÄ Join üöÄ", url="https://t.me/GRANDTIMECHATENG/")
                keyboard.add(stats_no_button)
                bot.send_message(user_id, stats_no, reply_markup=keyboard)

        else:
            pass
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìä –ü—Ä–æ—Ñ–∏–ª—å':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith(('group_', 'all_stats')))
def group_stats_callback(call):
    try:
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        username = call.from_user.username
        button_pressed = call.data
        
        current_language = get_user_language(user_id)
        language = current_language
        
        if call.data == 'all_stats':
            conn, cursor = create_connection()
            cursor.execute("SELECT COUNT(*) FROM users WHERE user_id=?", (user_id,))
            user_exists = cursor.fetchone()[0]

            if user_exists == 0:
                if language == "rus":
                    stats_no = f"–£–ø—Å! –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –≥–¥–µ –µ—Å—Ç—å Grand Moderator, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å grand! üí™üöÄ"
                else:
                    stats_no = f"Oops, you don't have stats yet. Join our group with Grand Moderator to start earning bonus GRAND! üí™üöÄ "
                keyboard = types.InlineKeyboardMarkup()
                if language == "rus":
                    stats_no_button = types.InlineKeyboardButton("üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üöÄ", url="https://t.me/chatgrandtime/")
                else:
                    stats_no_button = types.InlineKeyboardButton("üöÄ Join üöÄ", url="https://t.me/GRANDTIMECHATENG/")
                keyboard.add(stats_no_button)
                bot.send_message(user_id, stats_no, reply_markup=keyboard)
            else:
                cursor.execute("SELECT SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE user_id=?", (user_id,))
                user_stats = cursor.fetchone()
                
                if language == "rus":
                    total_stats_message = f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_stats[0]}</b>\nüí† –í—Å–µ–≥–æ GRAND –±–æ–Ω—É—Å–æ–≤: <b>{round(user_stats[1], 2)}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{user_stats[2]}</b>\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{user_stats[3]}</b>\n"
                else:
                    total_stats_message = f"Your stats:\n\nüí¨ Total messages: <b>{user_stats[0]}</b>\nüí† Total GRAND bonuses: <b>{round(user_stats[1], 2)}</b>\nüìù Total words: <b>{user_stats[2]}</b>\n‚ö†Ô∏è Total Warnings: <b>{user_stats[3]}</b>\n"
                keyboard = types.InlineKeyboardMarkup()
                if language == "rus":
                    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_profile_to_groups")
                else:
                    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_profile_to_groups")
                keyboard.add(back_button)
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=total_stats_message, reply_markup=keyboard, parse_mode='HTML')


        else:
            group_id = int(call.data.replace('group_', ''))
            conn, cursor = create_connection()
            cursor.execute("SELECT chat_name, SUM(message_count), SUM(bonus_count), SUM(word_count), SUM(warn_count) FROM users WHERE chat_id=? AND user_id=?", (group_id, user_id))
            group_stats = cursor.fetchone()
            if group_stats:
                if language == "rus":
                    group_stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ <b>{group_stats[0]}</b>:\n\nüí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{group_stats[1]}</b>\nüí† –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: <b>{round(group_stats[2], 2)}</b>\nüìù –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{group_stats[3]}</b>\n‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{group_stats[4]}</b>\n"
                else:
                    group_stats_message = f"Stats from <b>{group_stats[0]}</b>:\n\nüí¨ Total messages: <b>{group_stats[1]}</b>\nüí† Total GRAND bonuses: <b>{round(group_stats[2], 2)}</b>\nüìù Total words: <b>{group_stats[3]}</b>\n‚ö†Ô∏è Total Warnings: <b>{group_stats[4]}</b>\n"
                keyboard = types.InlineKeyboardMarkup()
                if language == "rus":
                    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_profile_to_groups")
                else:
                    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_profile_to_groups")
                keyboard.add(back_button)
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=group_stats_message, reply_markup=keyboard, parse_mode='HTML')
            else:
                if language == "rus":
                    bot.send_message(user_id, f"–£–ø—Å! –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –≥–¥–µ –µ—Å—Ç—å Grand Moderator, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ! üí™üöÄ")
                else:
                    bot.send_message(user_id, f"Oops, you don't have stats yet. Join our group with a Grand Moderator to start collecting data! üí™üöÄ")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'group_':\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{call.from_user.username if call.from_user else 'N/A'}\n"
            f"‚Ä¢ –ö–Ω–æ–ø–∫–∞: {button_pressed}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

def ad_buttons(user_id):
    if user_id in prod_users:
        keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        no_prefix = types.KeyboardButton("no üí†")
        basa = types.KeyboardButton("üìÇ –ë–∞–∑–∞")
        balance = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
        keyboard.add(no_prefix, basa, balance)

        return keyboard
    else:
        pass

def save_proposal(user_id, username, proposal, message_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO proposals (user_id, username, proposal, message_id) VALUES (?, ?, ?, ?)', 
                   (user_id, username, proposal, message_id))
    conn.commit()
    conn.close()

def get_proposal(message_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, proposal FROM proposals WHERE message_id = ?', (message_id,))
    result = cursor.fetchone()
    conn.close()
    return result

@bot.message_handler(func=lambda message: message.text == "üì¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
def ad_button_handler(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚úçÔ∏è", callback_data=f"make_proposal_{user_id}")
    markup.add(button)

    cooperation_text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\n" \
                       "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n" \
                       "üîπ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ ü§ñ\n" \
                       "üîπ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –Ω–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üì¢\n" \
                       "üîπ –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ üí°\n\n" \
                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."

    bot.send_message(user_id, cooperation_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("make_proposal_"))
def proposal_handler(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    bot.edit_message_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", chat_id=user_id, message_id=message_id)

    bot.register_next_step_handler(call.message, process_proposal, message_id)

def process_proposal(message, message_id):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    proposal = message.text

    save_proposal(user_id, username, proposal, message_id)

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì§", callback_data=f"send_proposal_{message_id}")
    markup.add(button)

    bot.send_message(user_id, "üìã –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏:\n\n" + proposal + "\n\n–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì§', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_proposal_"))
def confirm_sending(call):
    message_id = int(call.data.split('_')[-1])

    result = get_proposal(message_id)
    if result:
        user_id, username, proposal = result
        bot.edit_message_text("‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.", chat_id=user_id, message_id=call.message.message_id)
        bot.send_message(-1001810568716, f"üîî –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{username} (ID: {user_id}):\n\n{proposal}")

def create_db():
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS proposals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            proposal TEXT,
            message_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

create_db()

@bot.message_handler(func=lambda message: message.text == "üì¢ –†–µ–∫–ª–∞–º–∞")
def ad_button_handler(message):
    user_id = message.from_user.id
    if message.from_user.id in prod_users:
        keyboard = ad_buttons(user_id)
        bot.send_message(chat_id=user_id, text="–†–µ–∫–ª–∞–º–Ω—ã–π —Ä–µ–∂–∏–º", reply_markup=keyboard)
    else:
        bot.send_message(chat_id=user_id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance_button_handler(message):
    user_id = message.from_user.id
    if user_id in prod_users:
        total_balance = get_total_balance()
        ad_balances = get_ad_balances()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        bot.send_message(chat_id=user_id, text=f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–ª–∞–º—ã
        message_text = ""
        for index, (ad_id, amount, data) in enumerate(ad_balances, start=1):
            message_text += f"[{ad_id}, –°—É–º–º–∞: {amount}, {data}]\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 –±–∞–ª–∞–Ω—Å–æ–≤ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
            if index % 20 == 0 or index == len(ad_balances):
                bot.send_message(chat_id=user_id, text=message_text)
                message_text = ""
    else:
        bot.send_message(chat_id=user_id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def get_total_balance():
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    cursor.execute("SELECT SUM(amount) FROM balance2")
    total_balance = cursor.fetchone()[0]

    conn.close()

    return total_balance

def get_ad_balances():
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    cursor.execute("SELECT ad_id, amount, data FROM balance2")
    ad_balances = cursor.fetchall()

    conn.close()

    return ad_balances

@bot.message_handler(func=lambda message: message.text == "üìÇ –ë–∞–∑–∞")
def ad_button_handler(message):
    user_id = message.from_user.id
    if message.from_user.id in prod_users:
        all_ad_info = get_all_ad_info()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        formatted_info = "\n".join([f"[{ad_id} ({send_count}), User: {user_count}, Group: {group_count}]" for ad_id, send_count, user_count, group_count in all_ad_info])

        bot.send_message(chat_id=user_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö:\n" + formatted_info)
    else:
        bot.send_message(chat_id=user_id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

def get_all_ad_info():
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    cursor.execute("SELECT ad_id, send_count, user_count, group_count FROM ad")
    all_ad_info = cursor.fetchall()

    conn.close()

    return all_ad_info

def count_users_with_prefix_and_language(prefix, language):
    conn = connect_to_db('database.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ prefix –∏ language
    cursor.execute("SELECT COUNT(*) FROM users WHERE prefix=? AND language=?", (prefix, language))
    count = cursor.fetchone()[0]

    conn.close()

    return count

def count_chats_with_prefix_and_language(prefix, language):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ prefix –∏ language
    cursor.execute("SELECT COUNT(*) FROM chats WHERE prefix=? AND language=?", (prefix, language))
    count = cursor.fetchone()[0]

    conn.close()

    return count

def count_active_users_in_chats_with_prefix_and_language(prefix, language):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ prefix –∏ language
    cursor.execute("SELECT chat_id FROM chats WHERE prefix=? AND language=?", (prefix, language))
    chat_ids = cursor.fetchall()

    total_active_users = 0

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for chat_id in chat_ids:
        cursor.execute("SELECT SUM(active_users) FROM chats WHERE chat_id=?", (chat_id[0],))
        active_users_count = cursor.fetchone()[0]
        total_active_users += active_users_count

    conn.close()

    return total_active_users

@bot.message_handler(func=lambda message: message.text == "no üí†")
def ad_button_handler(message):
    user_id = message.from_user.id
    if message.from_user.id in prod_users:
        prefix = "free"
        language = "rus"
        count_user = count_users_with_prefix_and_language(prefix, language)
        count_group = count_chats_with_prefix_and_language(prefix, language)
        active_user = count_active_users_in_chats_with_prefix_and_language(prefix, language)
        bot.send_message(chat_id=user_id, text=f"–í –±–∞–∑–µ {count_user} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ {count_group} –≥—Ä—É–ø–ø –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({active_user})")
    else:
        bot.send_message(chat_id=user_id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

def users_id_with_prefix_and_language(prefix, language):
    conn = connect_to_db('database.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ prefix –∏ language
    cursor.execute("SELECT user_id FROM users WHERE prefix=? AND language=?", (prefix, language))
    user_ids = cursor.fetchall()

    conn.close()

    return user_ids

def chats_id_with_prefix_and_language(prefix, language):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ prefix –∏ language
    cursor.execute("SELECT chat_id FROM chats WHERE prefix=? AND language=?", (prefix, language))
    chat_ids = cursor.fetchall()

    conn.close()

    return chat_ids

def ad_info_sotrud(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ ad_id
    cursor.execute("SELECT ad_user, ad_group, ad_text, tbutton1, tbutton2, tbutton3, nbutton1, nbutton2, nbutton3 FROM ad WHERE ad_id=?", (ad_id,))
    ad_info = cursor.fetchone()

    conn.close()

    return ad_info

def get_photo_from_db(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ photo_id
    cursor.execute("SELECT file_id FROM photos WHERE ad_id=?", (ad_id,))
    photo_data = cursor.fetchone()

    conn.close()

    return photo_data

def get_ad_with_max_send_count():
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute("SELECT COUNT(*) FROM ad")
    count_result = cursor.fetchone()

    if count_result[0] == 0:
        conn.close()
        return None

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ad_id —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º send_count
    cursor.execute("SELECT ad_id FROM ad ORDER BY send_count DESC LIMIT 1")
    result = cursor.fetchone()

    conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if result:
        ad_id = result[0]
        return ad_sotrudnichestvo(ad_id)
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
def ad_sotrudnichestvo(ad_id):
    prefix = "free"
    language = "rus"
    directory = f"photos/{ad_id}"
    ad_info = ad_info_sotrud(ad_id)
    photo_data = get_photo_from_db(ad_id)
    user_ids = users_id_with_prefix_and_language(prefix, language)
    chat_ids = chats_id_with_prefix_and_language(prefix, language)
    ad_user, ad_group, ad_text, tbutton1, tbutton2, tbutton3, nbutton1, nbutton2, nbutton3 = ad_info
    keyboard = types.InlineKeyboardMarkup()
    url_button1 = types.InlineKeyboardButton(text=f"{tbutton1}", url=f"{nbutton1}")
    url_button2 = types.InlineKeyboardButton(text=f"{tbutton2}", url=f"{nbutton2}")
    url_button3 = types.InlineKeyboardButton(text=f"{tbutton3}", url=f"{nbutton3}")
    keyboard.add(url_button1)
    keyboard.add(url_button2)
    keyboard.add(url_button3)

    try:
        if ad_user == "yes":
            user_count = 0
            for user_id in user_ids:
                with open(f"{directory}/{photo_data[0]}.jpg", 'rb') as photo_file:
                    bot.send_photo(user_id, photo_file, caption=ad_text, reply_markup=keyboard, parse_mode="HTML")
                    user_count += 1
                    update_ad_user_count(ad_id, user_count)
        else:
            pass
    except Exception as e:
        logging.error(f"Error sending ad to user: {e}")
    
    try:
        if ad_group == "yes":
            group_count = 0
            for chat_id in chat_ids:
                with open(f"{directory}/{photo_data[0]}.jpg", 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file, caption=ad_text, reply_markup=keyboard, parse_mode="HTML")
                    group_count += 1
                    update_ad_chat_count(ad_id, group_count)
        else:
            pass
    except Exception as e:
        logging.error(f"Error sending ad to group: {e}")
    
    try:
        send_count = decrement_send_count(ad_id)
        text = f"–†–µ–∫–ª–∞–º—É –ø–æ–ª—É—á–∏–ª–∏:\n\n {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n{group_count} –≥—Ä—É–ø–ø\n–†–µ–∫–ª–∞–º–∞ –µ—â—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è: {send_count} —Ä–∞–∑(–∞)"
        text += ad_text
        with open(f"{directory}/{photo_data[0]}.jpg", 'rb') as photo_file:
            bot.send_photo(ad_id, photo_file, caption=text, reply_markup=keyboard, parse_mode="HTML")
            bot.send_photo(-1001810568716, photo_file, caption=text, reply_markup=keyboard, parse_mode="HTML")
            check_and_delete_ad(ad_id)
    except Exception as e:
        logging.error(f"Error sending summary message: {e}")

@bot.message_handler(commands=['balance'])
def balance_command(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    command_parts = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(command_parts) != 4:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance [ad_id] [amount] [data]")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ad_id, amount –∏ data –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        ad_id = int(command_parts[1])
        amount = float(command_parts[2])
        data = command_parts[3]

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å
        add_balance(ad_id, amount, data)

        bot.reply_to(message, f"–°—É–º–º–∞ {amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –±–∞–ª–∞–Ω—Å—É —Å ID {ad_id} —Å –¥–∞–Ω–Ω—ã–º–∏ '{data}'.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ amount —É–∫–∞–∑–∞–Ω –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

@bot.message_handler(commands=['remove_balance'])
def remove_balance_command(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    command_parts = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∫–∞–∑–∞–Ω ad_id
    if len(command_parts) != 2:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_balance [ad_id]")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ad_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        ad_id = int(command_parts[1])

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞
        if remove_balance(ad_id):
            bot.reply_to(message, f"–ó–∞–ø–∏—Å—å —Å ID {ad_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞.")
        else:
            bot.reply_to(message, f"–ó–∞–ø–∏—Å—å —Å ID {ad_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–ª–∞–Ω—Å–µ.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ad_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ad_id –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

def remove_balance(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã balance –ø–æ ad_id
        cursor.execute("DELETE FROM balance2 WHERE ad_id = ?", (ad_id,))
        conn.commit()
        conn.close()
        return True
    except sqlite3.Error as e:
        print("–û—à–∏–±–∫–∞ SQLite:", e)
        conn.close()
        return False

def add_balance(ad_id, amount, data):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É balance, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''CREATE TABLE IF NOT EXISTS balance2 (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            ad_id INTEGER,
                            amount TEXT,
                            data TEXT
                          )''')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É balance
        cursor.execute("INSERT INTO balance2 (ad_id, amount, data) VALUES (?, ?, ?)", (ad_id, amount, data))

        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print("–û—à–∏–±–∫–∞ SQLite:", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_ad_to_db(ad_id, send_count, nbutton1, tbutton1, nbutton2, tbutton2, nbutton3, tbutton3, ad_user, ad_group):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO ad (ad_id, ad_text, group_count, user_count, send_count, nbutton1, tbutton1, nbutton2, tbutton2, nbutton3, tbutton3, ad_user, ad_group) VALUES (?, ?, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                   (ad_id, "non", send_count, nbutton1, tbutton1, nbutton2, tbutton2, nbutton3, tbutton3, ad_user, ad_group))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_ad_chat_count(ad_id, group_count):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE ad SET group_count = ? WHERE ad_id = ?", (group_count, ad_id))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_ad_user_count(ad_id, user_count):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE ad SET user_count = ? WHERE ad_id = ?", (user_count, ad_id))

    conn.commit()
    conn.close()

def check_and_delete_ad(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ send_count
    cursor.execute("SELECT send_count FROM ad WHERE ad_id = ?", (ad_id,))
    result = cursor.fetchone()
    current_send_count = result[0] if result else None

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ send_count —Ä–∞–≤–Ω–æ 0, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    if current_send_count == 0:
        cursor.execute("DELETE FROM ad WHERE ad_id = ?", (ad_id,))
        conn.commit()
        conn.close()
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
    else:
        conn.close()
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞

def decrement_send_count(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ send_count
    cursor.execute("SELECT send_count FROM ad WHERE ad_id = ?", (ad_id,))
    result = cursor.fetchone()
    current_send_count = result[0] if result else None

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ send_count –±–æ–ª—å—à–µ 0, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if current_send_count is not None and current_send_count > 0:
        cursor.execute("UPDATE ad SET send_count = send_count - 1 WHERE ad_id = ?", (ad_id,))
        new_send_count = current_send_count - 1
    else:
        new_send_count = current_send_count

    conn.commit()
    conn.close()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ send_count
    return new_send_count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_ad_text(ad_id, new_text):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE ad SET ad_text = ? WHERE ad_id = ?", (new_text, ad_id))

    conn.commit()
    conn.close()

@bot.message_handler(commands=['ad_text'])
def ad_text(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    command_parts = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∫–∞–∑–∞–Ω ad_id –∏ —Ç–µ–∫—Å—Ç
    if len(command_parts) < 3:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ad_text [ad_id] [text]")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ad_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    ad_id = command_parts[1]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    new_text = message.text.split(' ', 2)[2]

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã
    update_ad_text(ad_id, new_text)

    bot.reply_to(message, f"–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã —Å ID {ad_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adinfo
@bot.message_handler(commands=['adinfo'])
def ad_info(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ad_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    ad_id = message.text.split(' ', 1)[-1]
    if not ad_id:
        bot.reply_to(message, "–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å ad_id. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /adinfo [ad_id]")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    ad_data = get_ad_info_from_db(ad_id)
    if not ad_data:
        bot.reply_to(message, "–†–µ–∫–ª–∞–º–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ad_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    ad_text = ad_data[0]
    send_count = ad_data[1]
    nbutton1 = ad_data[2]
    tbutton1 = ad_data[3]
    nbutton2 = ad_data[4]
    tbutton2 = ad_data[5]
    nbutton3 = ad_data[6]
    tbutton3 = ad_data[7]
    ad_user = ad_data[8]
    ad_group = ad_data[9]

    reply_text = f"–î–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º—ã —Å ad_id {ad_id}:\n\n" \
                 f"–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã: {ad_text}\n" \
                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {send_count}\n" \
                 f"–ö–Ω–æ–ø–∫–∞ 1: {tbutton1} - {nbutton1}\n" \
                 f"–ö–Ω–æ–ø–∫–∞ 2: {tbutton2} - {nbutton2}\n" \
                 f"–ö–Ω–æ–ø–∫–∞ 3: {tbutton3} - {nbutton3}\n" \
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ad_user}\n" \
                 f"–ì—Ä—É–ø–ø–∞: {ad_group}"

    bot.reply_to(message, reply_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_ad_info_from_db(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ ad_id
    cursor.execute("SELECT ad_text, send_count, nbutton1, tbutton1, nbutton2, tbutton2, nbutton3, tbutton3, ad_user, ad_group FROM ad WHERE ad_id=?", (ad_id,))
    ad_data = cursor.fetchone()

    conn.close()

    return ad_data

@bot.message_handler(commands=['remove_ad'])
def remove_ad_command(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    command_parts = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∫–∞–∑–∞–Ω ad_id
    if len(command_parts) != 2:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_ad [ad_id]")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ad_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        ad_id = int(command_parts[1])

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if remove_ad(ad_id):
            bot.reply_to(message, f"–†–µ–∫–ª–∞–º–∞ —Å ID {ad_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.reply_to(message, f"–†–µ–∫–ª–∞–º–∞ —Å ID {ad_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ad_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ad_id –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

def remove_ad(ad_id):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    try:
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ad –ø–æ ad_id
        cursor.execute("DELETE FROM ad WHERE ad_id = ?", (ad_id,))
        conn.commit()
        conn.close()
        return True
    except sqlite3.Error as e:
        print("–û—à–∏–±–∫–∞ SQLite:", e)
        conn.close()
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/add_ad"
@bot.message_handler(commands=['add_ad'])
def add_ad(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:]
    if len(args) != 10:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: /add_ad [ad_id] [send_count] [nbutton1] [tbutton1] [nbutton2] [tbutton2] [nbutton3] [tbutton3] [ad_user] [ad_group]")
        return
    
    try:
        ad_id = int(args[0])
        send_count = int(args[1])
    except ValueError:
        bot.reply_to(message, "ad_id –∏ send_count –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_ad_to_db(ad_id, send_count, *args[2:])

    bot.reply_to(message, f"–†–µ–∫–ª–∞–º–∞ —Å ad_id {ad_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_photo_to_db(ad_id, file_id, file_path):
    conn = connect_to_db('ad.db')
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO photos (ad_id, file_id, file_path) VALUES (?, ?, ?)",
                   (ad_id, file_id, file_path))

    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    photo_id = message.photo[-1].file_id
    chat_id = message.chat.id
    text = message.caption
    ad_id = None
    if text and text.startswith("ad_id:"):
        ad_id = text.split(":")[1].strip()

    # –ï—Å–ª–∏ ad_id –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if ad_id:
        file_info = bot.get_file(photo_id)
        file_path = file_info.file_path
        save_photo_to_db(ad_id, message.photo[-1].file_id, file_path)
        save_photo_to_directory(ad_id, message.photo[-1].file_id, file_path)
        bot.reply_to(message, f"–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º ad_id {ad_id}, —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        pass

def save_photo_to_directory(ad_id, file_id, file_path):
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    BOT_TOKEN = "6971843804:AAHe5i1mA2j5cRSrCoJnG8UyBEpxBCYjX6k"
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    directory = f"photos/{ad_id}"
    os.makedirs(directory, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    response = requests.get(file_url)
    if response.status_code == 200:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        with open(f"{directory}/{file_id}.jpg", 'wb') as photo_file:
            photo_file.write(response.content)
        return f"{directory}/{file_id}.jpg"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    else:
        return None

# –ö–æ–Ω–µ—Ü —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–ª–æ–∫–∞

def get_users_data():
    try:
        connection = connect_to_db('database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT DISTINCT user_id, language FROM users")
        users_data = cursor.fetchall()
        return users_data
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        cursor.close()
        connection.close()

def get_russian_texts():
    try:
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()
        cursor.execute("SELECT value FROM book")
        russian_texts = cursor.fetchall()
        return russian_texts
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤: {e}")
    finally:
        cursor.close()
        connection.close()

def get_english_texts():
    try:
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()
        cursor.execute("SELECT value FROM book_en")
        english_texts = cursor.fetchall()
        return english_texts
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤: {e}")
    finally:
        cursor.close()
        connection.close()

def send_advertisement_to_users():
    users_data = get_users_data()
    russian_texts = get_russian_texts()
    english_texts = get_english_texts()

    if not users_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return

    try:
        for user_data in users_data:
            user_id, language = user_data
            try:
                random_caption = random.choice(russian_texts)[0] if language == 'rus' else random.choice(english_texts)[0]
                photo_path = 'grand.jpg'
                keyboard = types.InlineKeyboardMarkup()
                
                if language == 'rus':
                    url_ru_button = types.InlineKeyboardButton(text="–ò–¥—É —á–∏—Ç–∞—Ç—å!", url="https://www.litres.ru/book/artur-grandi/grand-time-70005007/?lfrom=1117899162&ref_key=c640e512577d7235adb7f208059ba746eb3dd77dbbb2d48de86aa6ec141245fb&ref_offer=1")
                    keyboard.add(url_ru_button)
                    with open(photo_path, 'rb') as photo:
                        bot.send_photo(user_id, photo, caption=random_caption, reply_markup=keyboard)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                elif language == 'en':
                    url_button = types.InlineKeyboardButton(text="Going read!", url="https://a.co/d/gJxsXqP")
                    keyboard.add(url_button)
                    with open(photo_path, 'rb') as photo:
                        bot.send_photo(user_id, photo, caption=random_caption, reply_markup=keyboard)
                    print(f"Sent message to user {user_id} in English")
                    
                time.sleep(5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞: {e}")


def send_advertisement_to_chats():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —á–∞—Ç–æ–≤
        connection_chats = connect_to_db('chat_data.db')
        cursor_chats = connection_chats.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_chats.execute("SELECT DISTINCT chat_id, language FROM chats")
        chat_ids = cursor_chats.fetchall()

        russian_texts = get_russian_texts()
        english_texts = get_english_texts()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        for chat_id, language in chat_ids:
            try:
                random_caption = random.choice(russian_texts)[0] if language == 'rus' else random.choice(english_texts)[0]
                if language == 'rus':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    photo = open('grand.jpg', 'rb')
                    keyboard = types.InlineKeyboardMarkup()
                    url_ruschat_button = types.InlineKeyboardButton(text="–ò–¥—É —á–∏—Ç–∞—Ç—å! üìö", url="https://www.litres.ru/book/artur-grandi/grand-time-70005007/?lfrom=1117899162&ref_key=c640e512577d7235adb7f208059ba746eb3dd77dbbb2d48de86aa6ec141245fb&ref_offer=1")
                    keyboard.add(url_ruschat_button)
                    bot.send_photo(chat_id, photo, caption=random_caption, reply_markup=keyboard)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                elif language == 'en':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
                    photo = open('grand.jpg', 'rb')
                    keyboard = types.InlineKeyboardMarkup()
                    url_enchat_button = types.InlineKeyboardButton(text="Going read! üìö", url="https://a.co/d/gJxsXqP")
                    keyboard.add(url_enchat_button)
                    bot.send_photo(chat_id, photo, caption=random_caption, reply_markup=keyboard)
                    print(f"Sent message to chat {chat_id} in English")
                    
                time.sleep(5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            except Exception as e:
                error_message = (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤
        cursor_chats.close()
        connection_chats.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–æ–≤: {e}")

def send_message_active_users():
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    cursor.execute("SELECT chat_id, language, active_users, sent_messages, earn FROM chats")
    chat_ids = cursor.fetchall()

    for chat_id, language, active_users, sent_messages, earn in chat_ids:
        try:
            if sent_messages == 0:
                if active_users >= 10:  # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if earn == "on_earn":
                        if language == "rus":
                            bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è ü•≥\n\n –¢–µ–ø–µ—Ä—å üë• —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å GRAND üí† –∑–∞ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ÄºÔ∏è")
                        elif language == "en":
                            bot.send_message(chat_id, "The group has reached a new level ü•≥\n\n üë• members can now receive a GRAND üí† bonus for their activity ‚ÄºÔ∏è")
                    else:
                        pass
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ sent_messages –Ω–∞ 1 –≤ —Ç–∞–±–ª–∏—Ü–µ chats
                    cursor.execute("UPDATE chats SET sent_messages = 1 WHERE chat_id = ?", (chat_id,))
                    conn.commit()
        except Exception as e:
            error_message = (
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º —É—Ä–æ–≤–Ω–µ:\n"
                f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
                f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
                f"‚Ä¢ Chat ID: {chat_id}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            logging.error(error_message)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
    conn.close()



def send_advertisement():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —á–∞—Ç–æ–≤
        connection_chats = connect_to_db('chat_data.db')
        cursor_chats = connection_chats.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor_chats.execute("SELECT DISTINCT chat_id, language FROM chats")
        chat_ids = cursor_chats.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        for chat_id, language in chat_ids:
            try:
                if language == 'rus':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    photo = open('ru_stats.jpg', 'rb')
                    keyboard = types.InlineKeyboardMarkup()
                    url_ruschat_button = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä", url="https://t.me/gmoderator_bot?start=GRANDMain")
                    keyboard.add(url_ruschat_button)
                    bot.send_photo(chat_id, photo, caption="–•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –¢–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏! üöÄ", reply_markup=keyboard)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
                elif language == 'en':
                    # –ï—Å–ª–∏ —è–∑—ã–∫ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
                    photo = open('en_stats.jpg', 'rb')
                    keyboard = types.InlineKeyboardMarkup()
                    url_enchat_button = types.InlineKeyboardButton(text="View stats üìä", url="https://t.me/gmoderator_bot?start=GRANDMain")
                    keyboard.add(url_enchat_button)
                    bot.send_photo(chat_id, photo, caption="Want to see your stats? Come on over! üöÄ", reply_markup=keyboard)
                    print(f"Sent message to chat {chat_id} in English")
            except Exception as e:
                error_message = (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤
        cursor_chats.close()
        connection_chats.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–æ–≤: {e}")


def update_active_users():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        cursor.execute("SELECT chat_id FROM chats")
        chat_ids = cursor.fetchall()

        for chat_id_tuple in chat_ids:
            chat_id = chat_id_tuple[0]

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            cursor.execute("SELECT COUNT(*) FROM users WHERE chat_id=?", (chat_id,))
            active_users_count = cursor.fetchone()[0]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–ª–µ active_users –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            cursor.execute("UPDATE chats SET active_users=? WHERE chat_id=?", (active_users_count, chat_id))

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
            cursor.execute("SELECT creator_id, level_count FROM creators WHERE chat_id=?", (chat_id,))
            creator_info = cursor.fetchone()
            creator_id = creator_info[0]
            creator_level_count = creator_info[1]

            # –û–±–Ω–æ–≤–ª—è–µ–º level_count –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if active_users_count >= 0 and active_users_count < 10:
                new_level_count = 0
            elif active_users_count >= 10 and active_users_count < 50:
                new_level_count = 1
            elif active_users_count >= 50 and active_users_count < 100:
                new_level_count = 2
            elif active_users_count >= 100 and active_users_count < 250:
                new_level_count = 3
            elif active_users_count >= 250 and active_users_count < 500:
                new_level_count = 4
            elif active_users_count >= 500 and active_users_count < 600:
                new_level_count = 5
            elif active_users_count >= 600 and active_users_count < 700:
                new_level_count = 6
            elif active_users_count >= 700 and active_users_count < 800:
                new_level_count = 7
            elif active_users_count >= 800 and active_users_count < 900:
                new_level_count = 8
            elif active_users_count >= 900 and active_users_count < 1000:
                new_level_count = 9
            else:
                new_level_count = 10

            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ —Ä–∞–≤–µ–Ω –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é, –æ–±–Ω–æ–≤–ª—è–µ–º level_count
            if creator_level_count != new_level_count:
                cursor.execute("UPDATE creators SET level_count=? WHERE chat_id=?", (new_level_count, chat_id))
                cursor.execute("UPDATE chats SET level_count=? WHERE chat_id=?", (new_level_count, chat_id))
                print(f"–£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å {creator_level_count} –¥–æ {new_level_count}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

    except sqlite3.Error as e:
        error_message = (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {chat_id}: {e}")
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals():
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_old_messages():
    conn = connect_to_db('messages.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞
    one_minute_ago = datetime.now() - timedelta(minutes=1)

    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã
    cursor.execute("SELECT * FROM last_messages WHERE timestamp < ?", (one_minute_ago,))
    old_messages = cursor.fetchall()

    # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for message in old_messages:
        chat_id, user_id, message_id = message[0], message[2], message[1]
        cursor.execute("DELETE FROM last_messages WHERE chat_id = ? AND user_id = ? AND message_id = ?", (chat_id, user_id, message_id))
        conn.commit()

    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def schedule_task():
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    schedule.every(1).seconds.do(check_expired_users)
    schedule.every(1).seconds.do(delete_old_messages)
    schedule.every().wednesday.at("18:00").do(send_advertisement)
    schedule.every().friday.at("12:00").do(send_advertisement_to_users)
    schedule.every().monday.at("12:00").do(send_advertisement_to_chats)
    schedule.every().sunday.at("16:30").do(get_ad_with_max_send_count)
    schedule.every(10).seconds.do(update_active_users)
    schedule.every(10).seconds.do(send_message_active_users)

    while True:
        schedule.run_pending()
        time.sleep(1)

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
schedule_thread = threading.Thread(target=schedule_task)
schedule_thread.daemon = True  # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–∫ –¥–µ–º–æ–Ω, —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
schedule_thread.start()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è creator_id –Ω–∞ –æ—Å–Ω–æ–≤–µ chat_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã creators
def get_creator_id(chat_id):
    try:
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT creator_id, level_count FROM creators WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (creator_id, level_count) –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    except sqlite3.OperationalError as e:
        print("Error:", e)
        return None



# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_good_keywords():
    conn = connect_to_db('good.db')
    c = conn.cursor()
    c.execute('SELECT keyword FROM keywords')
    keywords = [row[0] for row in c.fetchall()]
    conn.close()
    return keywords

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_fuck_keywords():
    conn = connect_to_db('fuck.db')
    c = conn.cursor()
    c.execute('SELECT keyword FROM keywords')
    keywords = [row[0] for row in c.fetchall()]
    conn.close()
    return keywords

    
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_spam_keywords():
    conn = connect_to_db('spam.db')
    c = conn.cursor()
    c.execute('SELECT keyword FROM keywords')
    keywords = [row[0] for row in c.fetchall()]
    conn.close()
    return keywords

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_spam_keyword(keyword_phrase):
    conn = connect_to_db('spam.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO keywords (keyword) VALUES (?)', (keyword_phrase,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
def is_similar_to_spam(message_text, spam_keywords):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for keyword in spam_keywords:
        if keyword in message_text.lower():
            return True
    
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
def is_similar_to_gm(message_text, goodmorning_keywords):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for keyword in goodmorning_keywords:
        if keyword in message_text.lower():
            return True
    
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
def is_similar_to_fuck(message_text, fuck_keywords):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for keyword in fuck_keywords:
        if keyword in message_text.lower():
            return True
    
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
def is_similar_to_key(message_text, keywords):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for keyword in keywords:
        if keyword in message_text.lower():
            return True
    
    return False

def contains_links(message_text):
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
    urls = re.findall(url_pattern, message_text)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏, –∏–Ω–∞—á–µ False
    return len(urls) > 0

def user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT 1 FROM users WHERE chat_id=? AND user_id=?", (chat_id, user_id))
    existing_user = cursor.fetchone()
    
    if not existing_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute('''INSERT INTO users 
                          (chat_id, chat_name, user_id, user_username, message_count, bonus_count, word_count, reactions_count, warn_count) 
                          VALUES (?, ?, ?, ?, 0, 0, 0, 0, 0)''', (chat_id, chat_name, user_id, user_username))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_chat_language(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM chats WHERE chat_id=?", (chat_id,))
    language = cursor.fetchone()
    conn.close()
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'rus'
    if language is None:
        return 'en'
    else:
        return language[0]

def update_total_warn_count(chat_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º chat_id
        cursor.execute("SELECT user_id, warn_count FROM users WHERE chat_id=?", (chat_id,))
        users_data = cursor.fetchall()

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        total_warn_count = sum(warn_count for _, warn_count in users_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ chats —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        cursor.execute("UPDATE chats SET warn_count=? WHERE chat_id=?", (total_warn_count, chat_id))
        connection.commit()

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ —Å chat_id={chat_id}: {total_warn_count}")
    except sqlite3.Error as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite:", e)
    except Exception as e:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)

def notification(user_username, chat_id, user_id, chat_name, language, text, text1, text2, duration1, duration2, duration3):
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–ª–∏–∫–æ–≤
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username)

        # –ü–æ–ª—É—á–∞–µ–º warn_count –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT warn_count FROM users WHERE chat_id=? AND user_id=?", (chat_id, user_id))
        warn_count = cursor.fetchone()[0]
        kick = data['notification_text'][language]['kick']

        if warn_count == 0:
            duration = duration1
            warn_count += 1
            if duration == 5184:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>1</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>1</b>/3", parse_mode="HTML")
            elif duration == 5184000:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>1</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>1</b>/3", parse_mode="HTML")
                    bot.kick_chat_member(chat_id, user_id)
            else:
                new_duration = duration / 60 / 60
                if new_duration <= 24:
                    # Determine the appropriate time text based on the language and hour
                    if language == "rus":
                        if new_duration == 1 or new_duration == 21:
                            time_text = "—á–∞—Å"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "—á–∞—Å–∞"
                        else:
                            time_text = "—á–∞—Å–æ–≤"
                    else:  # English language
                        if new_duration == 1 or new_duration == 21:
                            time_text = "hour"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "hours"
                        else:
                            time_text = "hours"
                    user_status = bot.get_chat_member(chat_id, user_id).status
                    if user_status not in ('creator', 'administrator'):
                        bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
                        if language == "rus":
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>1</b>/3",parse_mode="HTML")
                        else:
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>1</b>/3", parse_mode="HTML")

        elif warn_count == 1:
            duration = duration2
            warn_count += 1
            if duration == 5184:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>2</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>2</b>/3", parse_mode="HTML")
            elif duration == 5184000:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>2</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>2</b>/3", parse_mode="HTML")
                    bot.kick_chat_member(chat_id, user_id)
            else:
                new_duration = duration / 60 / 60
                if new_duration <= 24:
                    # Determine the appropriate time text based on the language and hour
                    if language == "rus":
                        if new_duration == 1 or new_duration == 21:
                            time_text = "—á–∞—Å"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "—á–∞—Å–∞"
                        else:
                            time_text = "—á–∞—Å–æ–≤"
                    else:  # English language
                        if new_duration == 1 or new_duration == 21:
                            time_text = "hour"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "hours"
                        else:
                            time_text = "hours"
                    user_status = bot.get_chat_member(chat_id, user_id).status
                    if user_status not in ('creator', 'administrator'):
                        bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
                        if language == "rus":
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>2</b>/3",parse_mode="HTML")
                        else:
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>2</b>/3", parse_mode="HTML")


        elif warn_count == 2:
            duration = duration3
            warn_count += 1
            if duration == 5184:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>3</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text2} <b>3</b>/3", parse_mode="HTML")
            elif duration == 5184000:
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>3</b>/3",parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{kick}\n\n{text2} <b>3</b>/3", parse_mode="HTML")
                    bot.kick_chat_member(chat_id, user_id)
            else:
                new_duration = duration / 60 / 60
                if new_duration <= 24:
                    # Determine the appropriate time text based on the language and hour
                    if language == "rus":
                        if new_duration == 1 or new_duration == 21:
                            time_text = "—á–∞—Å"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "—á–∞—Å–∞"
                        else:
                            time_text = "—á–∞—Å–æ–≤"
                    else:  # English language
                        if new_duration == 1 or new_duration == 21:
                            time_text = "hour"
                        elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                            time_text = "hours"
                        else:
                            time_text = "hours"
                    user_status = bot.get_chat_member(chat_id, user_id).status
                    if user_status not in ('creator', 'administrator'):
                        bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
                        if language == "rus":
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>3</b>/3",parse_mode="HTML")
                        else:
                            bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}\n\n{text2} <b>3</b>/3", parse_mode="HTML")

        else:
            duration = duration3
            new_duration = duration / 60 / 60
            warn_count += 1
            if new_duration <= 24:
                # Determine the appropriate time text based on the language and hour
                if language == "rus":
                    if new_duration == 1 or new_duration == 21:
                        time_text = "—á–∞—Å"
                    elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                        time_text = "—á–∞—Å–∞"
                    else:
                        time_text = "—á–∞—Å–æ–≤"
                else:  # English language
                    if new_duration == 1 or new_duration == 21:
                        time_text = "hour"
                    elif new_duration == 2 or new_duration == 3 or new_duration == 4 or new_duration == 22 or new_duration == 23 or new_duration == 24:
                        time_text = "hours"
                    else:
                        time_text = "hours"
                user_status = bot.get_chat_member(chat_id, user_id).status
                if user_status not in ('creator', 'administrator'):
                    bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
                    if language == "rus":
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}", parse_mode="HTML")
                    else:
                        bot.send_message(chat_id, f"@{user_username}, {text}\n\n{text1} <b>{int(new_duration)}</b> {time_text}", parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º warn_count –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET warn_count=? WHERE chat_id=? AND user_id=?", (warn_count, chat_id, user_id))
        connection.commit()
        update_total_warn_count(chat_id)
    
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{user_username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'connection' in locals():
            connection.close()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_group_earn(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT earn FROM chats WHERE chat_id=?", (chat_id,))
    result = cursor.fetchone()
    conn.close()

    if result is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
        if result[0] == 'on_earn':
            return 'on_earn'
        elif result[0] == 'off_earn':
            return 'off_earn'
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, off_earn
    return 'off_earn'  # –ò–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def get_group_key(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key FROM chats WHERE chat_id=?", (chat_id,))
    key = cursor.fetchone()[0]
    conn.close()
    return key

def get_group_good_text(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT good_text FROM chats WHERE chat_id=?", (chat_id,))
    good_text = cursor.fetchone()[0]
    conn.close()
    return good_text

def get_group_support(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT support, spam, fuck, flood, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3, duration_flood1, duration_flood2, duration_flood3, link FROM chats WHERE chat_id=?", (chat_id,))
    support_data = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    conn.close()
    return support_data


def clean_message(message):
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    cleaned_message = re.sub(r'<[^>]*>', '', message)
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
    cleaned_message = remove_emoji(cleaned_message)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
    cleaned_message = ' '.join(cleaned_message.split())
    return cleaned_message

def remove_emoji(text):
    emoji_pattern = re.compile("["
                               u"\U0001F600-\U0001F64F"  # emoticons
                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                               u"\U0001F680-\U0001F6FF"  # transport & map symbols
                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                               "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', text)


def get_active_chat_recipient(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT sender_id FROM active_chats WHERE recipient_id = ?''', (chat_id,))
    active_chat = cursor.fetchone()
    conn.close()
    
    return active_chat[0] if active_chat else None

def get_active_chat_sender(chat_id):
    conn = connect_to_db('active_chats.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT recipient_id FROM active_chats WHERE sender_id = ?''', (chat_id,))
    active_chat = cursor.fetchone()
    conn.close()
    
    return active_chat[0] if active_chat else None

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def create_spam_db():
    conn = connect_to_db('spam.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS keywords (
                    id INTEGER PRIMARY KEY,
                    keyword TEXT UNIQUE
                )''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_message(chat_id, message_id):
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é _save_message –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    executor.submit(_save_message, chat_id, message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def _save_message(chat_id, message_id):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with connect_to_db("messages.db") as conn:
        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor = conn.cursor()
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("INSERT INTO messages (chat_id, message_id) VALUES (?, ?)", (chat_id, message_id))
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_mod(chat_id, user_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_name, user_username FROM users WHERE user_id=? AND chat_id=?", (user_id, chat_id))
    user_mod = cursor.fetchone()
    conn.close()
    return user_mod

def send_mod_notification(chat_id, user_id, duration_flood1, duration_flood2, duration_flood3):
    user_mod = get_user_mod(chat_id, user_id)
    chat_name, user_username = user_mod
    try:

        language = get_chat_language(chat_id)
        text = data['notification_text'][language]['flood']
        text1 = data['notification_text'][language]['mute']
        text2 = data['notification_text'][language]['delete']
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username)

        duration = 3600  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 —á–∞—Å
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status not in ('creator', 'administrator'):
            bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
        notification(user_username, chat_id, user_id, chat_name, language, text, text1, text2, duration_flood1, duration_flood2, duration_flood3)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ User ID: {chat_id}\n"
            f"‚Ä¢ Username: @{user_username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'connection' in locals():
            connection.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def mod_message_more(chat_id, message_id, user_id, message_text, duration_flood1, duration_flood2, duration_flood3):
    executor.submit(_mod_message_more, chat_id, message_id, user_id, message_text, duration_flood1, duration_flood2, duration_flood3)

def _mod_message_more(chat_id, message_id, user_id, message_text, duration_flood1, duration_flood2, duration_flood3):
    conn = connect_to_db('messages.db')
    cursor = conn.cursor()

    print("Starting mod_message_more function")

    # Check for duplicate messages within the last minute
    one_minute_ago = datetime.now() - timedelta(minutes=1)
    cursor.execute("SELECT * FROM last_messages WHERE chat_id = ? AND user_id = ? AND message_text = ? AND timestamp > ?", (chat_id, user_id, message_text, one_minute_ago))
    duplicate_messages = cursor.fetchall()
    print("Duplicate messages found:", duplicate_messages)
    user_status = bot.get_chat_member(chat_id, user_id).status
    print("User status:", user_status)
    duration = 3600  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 —á–∞—Å

    # If duplicate messages found
    if len(duplicate_messages) > 1:
        print("Duplicate messages count:", len(duplicate_messages))

        # Get duplicate message IDs, excluding the original message ID
        duplicate_message_ids = [msg[1] for msg in duplicate_messages[1:]]
        print("Duplicate message IDs:", duplicate_message_ids)

        # Delete duplicate messages from chat
        for message_id_to_delete in duplicate_message_ids:
            cursor.execute("UPDATE last_messages SET count = count + 1 WHERE chat_id = ? AND user_id = ? AND message_text = ?", (chat_id, user_id, message_text))
            cursor.execute("SELECT count FROM last_messages WHERE chat_id = ? AND user_id = ? AND message_text = ?", (chat_id, user_id, message_text))
            count_count = cursor.fetchone()[0]  # Fetch count from the fetched row
            print("Count count:", count_count)
            # If more than 3 duplicates were deleted
        # –ï—Å–ª–∏ –±–æ–ª–µ–µ 3 –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        if int(count_count) > 2:
            print("More than 3 duplicates found")

            if user_status not in ('creator', 'administrator'):
                print("User is not a creator or administrator")

                # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.delete_message(chat_id, message_id_to_delete)
                bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration)
                print("Restriction imposed on user")

                time.sleep(1)
                cursor.execute("DELETE FROM last_messages WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
                print("Duplicate messages deleted from database")

                send_mod_notification(chat_id, user_id, duration_flood1, duration_flood2, duration_flood3)
                print("Notification sent to moderators")

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_last_message(chat_id, message_id, user_id, message_text):
    executor.submit(_save_last_message, chat_id, message_id, user_id, message_text)

def _save_last_message(chat_id, message_id, user_id, message_text):
    conn = connect_to_db('messages.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS last_messages
                      (chat_id INTEGER, message_id INTEGER, user_id INTEGER, message_text TEXT, timestamp, count TEXT)''')
    
    # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("INSERT INTO last_messages (chat_id, message_id, user_id, message_text, timestamp, count) VALUES (?, ?, ?, ?, ?, 0)", (chat_id, message_id, user_id, message_text, datetime.now()))
    
    conn.commit()
    conn.close()

def update_chat_data(chat_id, chat_name, user_id, user_username):
    try:
        connection = connect_to_db('chat_data.db')
        cursor = connection.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∏–º—è —á–∞—Ç–∞
        cursor.execute("SELECT chat_name FROM chats WHERE chat_id=?", (chat_id,))
        old_chat_name = cursor.fetchone()[0]

        if old_chat_name != chat_name:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ chats
            cursor.execute("UPDATE chats SET chat_name=? WHERE chat_id=?", (chat_name, chat_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("UPDATE users SET chat_name=? WHERE chat_id=?", (chat_name, chat_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT user_username FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result is not None:
            old_user_username = result[0]
            if old_user_username != user_username:
                # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
                cursor.execute("UPDATE users SET user_username=? WHERE user_id=?", (user_username, user_id))
                connection.commit()
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID", user_id, "–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∂—É—Ä–Ω–∞–ª
        logging.error(error_message)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'connection' in locals():
            connection.close()


@bot.message_handler(content_types=['text'])
def handle_group_message(message):
    if message.chat.type == "private":  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
        chat_id = message.from_user.id
        sender_id = get_active_chat_sender(chat_id)
        recipient_id = get_active_chat_recipient(chat_id)
        user_language = get_user_language(chat_id)
        # –ï—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if '?' in message.text:
            if user_language == "en":
                bot.send_message(message.chat.id, "Hi! üòä If you need help, contact technical support. Just click on the button\"üõ† Support\" and we'll get back to you. üöÄ\n\nWe are here to help you solve any problems or answer your questions. üë®‚Äçüíª")
            else:
                if sender_id:
                    bot.send_message(sender_id, message.text)
                elif recipient_id:
                    bot.send_message(recipient_id, message.text)
                else:
                    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üòä –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üõ† –ü–æ–º–æ—â—å\" –∏ –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è. üöÄ\n\n–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. üë®‚Äçüíª")
            return
        else:
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return

    chat_id = message.chat.id
    chat_name = message.chat.title
    user_id = message.from_user.id
    user_username = message.from_user.username
    user_status = bot.get_chat_member(chat_id, user_id).status
    update_chat_data(chat_id, chat_name, user_id, user_username)
    message_text = clean_message(message.text)  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    current_earn = get_group_earn(chat_id)
    current_good_text = get_group_good_text(chat_id)
    key = get_group_key(chat_id)
    if key == "non":
        pass
    else:
        words_list = [word.strip() for word in key.split(',')]
        if is_similar_to_key(message_text, words_list):
            bot.delete_message(chat_id, message.message_id)

    support_data = get_group_support(chat_id)
    support = support_data[0]  # –ó–Ω–∞—á–µ–Ω–∏–µ support
    spam = support_data[1]  # –ó–Ω–∞—á–µ–Ω–∏–µ spam
    fuck = support_data[2]  # –ó–Ω–∞—á–µ–Ω–∏–µ fuck
    flood = support_data[3]  # –ó–Ω–∞—á–µ–Ω–∏–µ flood
    duration_spam1 = support_data[4] 
    duration_spam2 = support_data[5] 
    duration_spam3 = support_data[6] 
    duration_fuck1 = support_data[7] 
    duration_fuck2 = support_data[8] 
    duration_fuck3 = support_data[9] 
    duration_flood1 = support_data[10] 
    duration_flood2 = support_data[11] 
    duration_flood3 = support_data[12]
    link = support_data[13]
    if flood == "on":
        save_last_message(chat_id, message.message_id, user_id, message_text)
        mod_message_more(chat_id, message.message_id, user_id, message_text, duration_flood1, duration_flood2, duration_flood3)
    else:
        pass

    save_message(chat_id, message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    print(f"Received message: {message_text} from user {user_username} in chat {chat_name}")
            
    create_spam_db()
    spam_keywords = load_spam_keywords()
    goodmorning_keywords = load_good_keywords()
    fuck_keywords = load_fuck_keywords()
    language = get_chat_language(chat_id) 
    try:
        if message.chat.type != "private":
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            if support == "off":
                if is_similar_to_spam(message_text, spam_keywords):
                    if spam == "on":
                        bot.delete_message(chat_id, message.message_id)
                        spam1 = data['notification_text'][language]['spam']
                        spam2 = data['notification_text'][language]['mute']
                        spam3 = data['notification_text'][language]['delete']
                        notification(user_username, chat_id, user_id, chat_name, language, spam1, spam2, spam3, duration_spam1, duration_spam2, duration_spam3)
                    else:
                        pass

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ
                elif is_similar_to_gm(message_text, goodmorning_keywords):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 2031010965
                    if current_good_text == "good_off":
                        bot.delete_message(chat_id, message.message_id)
                    else:
                        pass
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
                elif contains_links(message_text):
                    if link == "on":
                        if user_status not in ('creator', 'administrator'):
                            bot.delete_message(message.chat.id, message.message_id)
                        else:
                            pass
                    else:
                        pass
                elif is_similar_to_fuck(message_text, fuck_keywords):
                    # –ï—Å–ª–∏ —á–∞—Ç –∏–º–µ–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä -1001693817908
                    if fuck == "on":
                        bot.delete_message(message.chat.id, message.message_id)
                        fuck1 = data['notification_text'][language]['fuck']
                        fuck2 = data['notification_text'][language]['mute']
                        fuck3 = data['notification_text'][language]['delete']
                        notification(user_username, chat_id, user_id, chat_name, language, fuck1, fuck2, fuck3, duration_fuck1, duration_fuck2, duration_fuck3)
                    else:
                        pass
                        
                # –ü–æ–ª—É—á–∞–µ–º creator_id –∏ level_count –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                creator_info = get_creator_id(chat_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ creator_info –Ω–µ —Ä–∞–≤–µ–Ω None
                if creator_info:
                    creator_id, level_count = creator_info
                else:
                    # –ï—Å–ª–∏ creator_info —Ä–∞–≤–µ–Ω None, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º creator_id –∏ level_count –∑–Ω–∞—á–µ–Ω–∏–µ None
                    creator_id, level_count = None, None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                if current_earn == "on_earn":
                    if current_good_text == "good_on":
                        process_group_message(chat_id, chat_name, user_id, creator_id, level_count, user_username, message_text)  # –ü–µ—Ä–µ–¥–∞—á–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    else:
                        process_group_message_nogrand(chat_id, chat_name, user_id, user_username, message_text)  # –ü–µ—Ä–µ–¥–∞—á–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                else:
                    process_group_message_nogrand(chat_id, chat_name, user_id, user_username, message_text)  # –ü–µ—Ä–µ–¥–∞—á–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            else:
                pass

        else:
            pass
    
    except Exception as e:
        # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º message_text
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {message.chat.id}\n"
            f"‚Ä¢ Chat name: {message.chat.title}\n"
            f"‚Ä¢ User ID: {message.from_user.id}\n"
            f"‚Ä¢ Username: @{message.from_user.username}\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è grand_count –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id
def get_admin_grand_count(chat_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT grand_count FROM chats WHERE chat_id = ?", (chat_id,))
    grand_count = cursor.fetchone()
    conn.close()
    # –ï—Å–ª–∏ grand_count –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '1'
    if grand_count is None:
        return '1'
    else:
        return grand_count[0]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_warn_count(chat_id, user_id):
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT warn_count FROM users WHERE chat_id=? AND user_id=?", (chat_id, user_id))
    warn_count = cursor.fetchone()
    conn.close()
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'rus'
    if warn_count is None:
        return '0'
    else:
        return warn_count[0]


def create_users_table(cursor):
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (chat_id INTEGER, 
                      chat_name TEXT, 
                      user_id INTEGER, 
                      user_username TEXT, 
                      message_count INTEGER, 
                      bonus_count INTEGER, 
                      word_count INTEGER, 
                      reactions_count INTEGER,
                      warn_count INTEGER,
                      PRIMARY KEY (chat_id, user_id))''')

def add_user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username):
    cursor.execute('''INSERT OR IGNORE INTO users 
                      (chat_id, chat_name, user_id, user_username, message_count, bonus_count, word_count, reactions_count, warn_count) 
                      VALUES (?, ?, ?, ?, 0, 0, 0, 0, 0)''', (chat_id, chat_name, user_id, user_username))


def update_user_info_nogrand(cursor, chat_id, user_id, words_count):
    try:
        cursor.execute('''UPDATE users 
                          SET message_count = message_count + 1,
                              word_count = word_count + ?
                          WHERE chat_id = ? AND user_id = ?''', (words_count, chat_id, user_id))
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –±–æ–Ω—É—Å–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_id.chat.title}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{user_id.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def update_user_info(cursor, chat_id, user_id, words_count, level_count):
    warn_count = get_warn_count(chat_id, user_id)
    grand_count = get_admin_grand_count(chat_id)
    if level_count == 0:
        bonus_coefficient = 0
    else:
        if warn_count == 0:
            bonus_coefficient = float(grand_count) * 1
        elif warn_count == 1:
            bonus_coefficient = (float(grand_count) * 0.5) * 1
        elif warn_count == 2:
            bonus_coefficient = (float(grand_count) * 0.25) * 1
        else:
            bonus_coefficient = (float(grand_count) * 0.1) * 1
    try:
        cursor.execute('''UPDATE users 
                          SET message_count = message_count + 1,
                              word_count = word_count + ?,
                              bonus_count = bonus_count + ?
                          WHERE chat_id = ? AND user_id = ?''', (words_count, words_count * bonus_coefficient, chat_id, user_id))
        
        print(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {chat_id}. Bonus: {grand_count}")
        
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_id.chat.title}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{user_id.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def update_creator_bonus(cursor, chat_id, creator_id, words_count, user_id, level_count):
    grand_count = get_admin_grand_count(chat_id)
    warn_count = get_warn_count(chat_id, user_id)
    if user_id != creator_id:
        if level_count <= 10:
            if warn_count == 0:
                bonus_coefficient = float(grand_count) * level_count * 0.01
            elif warn_count == 1:
                bonus_coefficient = (float(grand_count) * 0.5) * level_count * 0.01
            elif warn_count == 2:
                bonus_coefficient = (float(grand_count) * 2.5) * level_count * 0.01
            else:
                bonus_coefficient = (float(grand_count) * 0.1) * level_count * 0.01
        else:
            bonus_coefficient = 0.1
    else:
        bonus_coefficient = 0
    
    try:
        cursor.execute('''UPDATE creators 
                          SET bonus_count = bonus_count + ?
                          WHERE creator_id = ? AND chat_id = ?''', (words_count * bonus_coefficient, creator_id, chat_id))
        print(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è {chat_id}. Bonus coefficient: {bonus_coefficient}, {grand_count}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_id.chat.title}\n"
            f"‚Ä¢ Creator ID: {creator_id}\n"
            f"‚Ä¢ Username: @{creator_id.from_user.username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è



def update_chat_info_nogrand(cursor, chat_id, words_count):
    try:
        cursor.execute('''UPDATE chats 
                          SET message_count = message_count + 1,
                              word_count = word_count + ?
                          WHERE chat_id = ?''', (words_count, chat_id))
        
        print(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {chat_id}. –°–ª–æ–≤: {words_count}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞ –±–µ–∑ –±–æ–Ω—É—Å–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_id.chat.title}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞

def update_chat_info(cursor, chat_id, words_count, user_id, level_count):
    warn_count = get_warn_count(chat_id, user_id)
    grand_count = get_admin_grand_count(chat_id)
    creator_info = get_creator_id(chat_id)
    if creator_info:
        creator_id, level_count = creator_info
    else:
        creator_id, level_count = None, 0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        if user_id == creator_id:
            user_role = "creator"
            if level_count == 0:
                bonus_coefficient = 0
            else:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) * 1
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) * 1
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) * 1
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) * 1
        else:
            user_role = "user"
            if level_count == 0:
                bonus_coefficient = 0
            elif level_count == 1:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.01)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.01)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.01)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.01)
            elif level_count == 2:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.02)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.02)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.02)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.02)
            elif level_count == 3:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.03)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.03)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.03)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.03)
            elif level_count == 4:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.04)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.04)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.04)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.04)
            elif level_count == 5:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.05)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.05)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.05)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.05)
            elif level_count == 6:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.06)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.06)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.06)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.06)
            elif level_count == 7:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.07)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.07)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.07)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.07)
            elif level_count == 8:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.08)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.08)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.08)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.08)
            elif level_count == 9:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.09)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.09)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.09)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.09)
            elif level_count == 10:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.1)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.1)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.1)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.1)
            else:
                if warn_count == 0:
                    bonus_coefficient = float(grand_count) + (float(grand_count) * 0.1)
                elif warn_count == 1:
                    bonus_coefficient = (float(grand_count) * 0.5) + (float(grand_count) * 0.5 * 0.1)
                elif warn_count == 2:
                    bonus_coefficient = (float(grand_count) * 0.25) + (float(grand_count) * 0.25 * 0.1)
                else:
                    bonus_coefficient = (float(grand_count) * 0.1) + (float(grand_count) * 0.1 * 0.1)

        cursor.execute('''UPDATE chats 
                          SET message_count = message_count + 1,
                              word_count = word_count + ?,
                              bonus_count = bonus_count + ?
                          WHERE chat_id = ?''', (words_count, words_count * bonus_coefficient, chat_id))
        
        print(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {chat_id}. –°–ª–æ–≤: {words_count}, –ù–∞–ø–∏—Å–∞–ª: {user_role}, –ë–æ–Ω—É—Å –∫–æ—ç—Ñ: {bonus_coefficient}, {grand_count}")
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: {user_id.from_user.username}\n"
            f"‚Ä¢ Chat name: {chat_id.chat.title}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞


def process_group_message_nogrand(chat_id, chat_name, user_id, user_username, message_text):
    conn = None
    cursor = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        create_users_table(cursor)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        add_user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
        words = message_text.split()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        words_count = len(words)



        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        update_user_info_nogrand(cursor, chat_id, user_id, words_count)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        update_chat_info_nogrand(cursor, chat_id, words_count)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()


    except sqlite3.OperationalError as e:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –±–æ–Ω—É—Å–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_name}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{user_username}\n"
            f"‚Ä¢ Message: {message_text}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def process_group_message(chat_id, chat_name, user_id, creator_id, level_count, user_username, message_text):
    conn = None
    cursor = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_db('chat_data.db')
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        create_users_table(cursor)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        add_user_if_not_exists(cursor, chat_id, chat_name, user_id, user_username)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
        words = message_text.split()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        words_count = len(words)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        update_user_info(cursor, chat_id, user_id, words_count, level_count)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—é —á–∞—Ç–∞
        update_creator_bonus(cursor, chat_id, creator_id, words_count, user_id, level_count)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        update_chat_info(cursor, chat_id, words_count, user_id, level_count)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()


    except sqlite3.OperationalError as e:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)

    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_name}\n"
            f"‚Ä¢ User ID: {user_id}\n"
            f"‚Ä¢ Username: @{user_username}\n"
            f"‚Ä¢ Creator ID: {creator_id}\n"
            f"‚Ä¢ Message: {message_text}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
def create_connection():
    conn = connect_to_db('chat_data.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS chats
                   (chat_id INTEGER PRIMARY KEY, 
                   chat_name TEXT, 
                   creator_id INTEGER, 
                   creator_username TEXT, 
                   language TEXT, 
                   active_users INTEGER, 
                   message_count INTEGER, 
                   bonus_count INTEGER, 
                   word_count INTEGER, 
                   reactions_count INTEGER,
                   warn_count INTEGER, 
                   level_count INTEGER, 
                   sent_messages INTEGER, 
                   earn TEXT,  
                   hi_text TEXT, 
                   good_text TEXT,  
                   grand_count INTEGER, 
                   support TEXT,
                   spam TEXT,
                   fuck TEXT,
                   flood TEXT,
                   duration_spam1 INTEGER,
                   duration_spam2 INTEGER,
                   duration_spam3 INTEGER,
                   duration_fuck1 INTEGER,
                   duration_fuck2 INTEGER,
                   duration_fuck3 INTEGER,
                   duration_flood1 INTEGER,
                   duration_flood2 INTEGER,
                   duration_flood3 INTEGER,
                   link TEXT,
                   key TEXT,
                   prefix TEXT 
                   )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS active_chats
                      (chat_id INTEGER PRIMARY KEY)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS creators
                   (creator_id INTEGER, 
                   creator_username TEXT,chat_id INTEGER PRIMARY KEY, 
                   chat_name TEXT, language TEXT, message_count INTEGER, 
                   bonus_count INTEGER, word_count INTEGER,  
                   reactions_count INTEGER,
                   warn_count INTEGER, level_count INTEGER)''')
    return conn, cursor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def close_connection(conn):
    conn.commit()
    conn.close()

def add_chat_to_db(cursor, conn, chat_id, chat_name, creator_id, creator_username, language, hi_text, earn, good_text, support, spam, fuck, flood, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3, duration_flood1, duration_flood2, duration_flood3, link, key, prefix):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    if not all((chat_id, chat_name, creator_id, creator_username, language, hi_text)):
        logging.error("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return False

    try:
        cursor.execute("INSERT INTO chats VALUES (?, ?, ?, ?, ?, 0, 0, 0, 0, 0, 0, 0, 0, ?, ?, ?, 1, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                       (chat_id, chat_name, creator_id, creator_username, language, earn, hi_text, good_text, support, spam, fuck, flood, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3, duration_flood1, duration_flood2, duration_flood3, link, key, prefix))
        conn.commit()
        return True
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_name}\n"
            f"‚Ä¢ Creator ID: {creator_id}\n"
            f"‚Ä¢ Creatorname: @{creator_username}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        logging.error(error_message)
        
        return False


def add_active_chat_to_db(cursor, conn, chat_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    if not chat_id:
        logging.error("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return False

    try:
        cursor.execute("INSERT INTO active_chats VALUES (?)", (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_creator_to_db(cursor, conn, creator_id, creator_username, chat_id, chat_name, language):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    if not all((creator_id, creator_username, chat_id, chat_name, language)):
        logging.error("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return False

    try:
        cursor.execute("INSERT INTO creators VALUES (?, ?, ?, ?, ?, 0, 0, 0, 0, 0, 0)", (creator_id, creator_username, chat_id, chat_name, language))
        conn.commit()
        return True
    except Exception as e:
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n"
            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
            f"‚Ä¢ Creator ID: {creator_id}\n"
            f"‚Ä¢ Creatorname: @{creator_username}\n"
            f"‚Ä¢ Chat ID: {chat_id}\n"
            f"‚Ä¢ Chat name: {chat_name}\n"
            f"‚Ä¢ Language: {language}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        logging.error(error_message)
        
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
def get_creator_language(creator_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö database.db
    conn_db = connect_to_db('database.db')
    cursor_db = conn_db.cursor()
    
    cursor_db.execute("SELECT language FROM users WHERE user_id=?", (creator_id,))
    creator_language = cursor_db.fetchone()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor_db.close()
    conn_db.close()
    
    return creator_language[0] if creator_language else None

def get_creator_prefix(creator_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö database.db
    conn_db = connect_to_db('database.db')
    cursor_db = conn_db.cursor()
    
    cursor_db.execute("SELECT prefix FROM users WHERE user_id=?", (creator_id,))
    creator_prefix = cursor_db.fetchone()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor_db.close()
    conn_db.close()
    
    return creator_prefix[0] if creator_prefix else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
def get_hi_text(creator_id):
    creator_language = get_creator_language(creator_id)
    if creator_language == "en":
        return "Welcome! Be active and earn GRAND bonus!"
    else:
        return "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å GRAND!"




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç
@bot.message_handler(content_types=['new_chat_members'])
def welcome_message(message):
    try:
        chat_id = message.chat.id
        chat_name = message.chat.title
        creator_id = message.from_user.id
        creator_username = message.from_user.username
        username = message.from_user.username

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn, cursor = create_connection()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        language = get_creator_language(creator_id)
        prefix = get_creator_prefix(creator_id)
        hi_text = get_hi_text(creator_id)
        earn = "on_earn"
        good_text = "good_on"
        support = "off"
        spam = "on"
        fuck = "on"
        flood = "on"
        duration_spam1 = 3600
        duration_spam2 = 10800
        duration_spam3 = 86400
        duration_fuck1 = 3600
        duration_fuck2 = 10800
        duration_fuck3 = 86400
        duration_flood1 = 3600
        duration_flood2 = 10800
        duration_flood3 = 86400
        link = "on"
        key = "non"
        new_members = message.new_chat_members

        for member in new_members:
            try:
                if member.is_bot:
                    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–æ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    print("–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute("SELECT * FROM chats WHERE chat_id=?", (chat_id,))
                    chat_exists = cursor.fetchone()

                    if not chat_exists:
                        add_chat_to_db(cursor, conn, chat_id, chat_name, creator_id, creator_username, language, hi_text, earn, good_text, support, spam, fuck, flood, duration_spam1, duration_spam2, duration_spam3, duration_fuck1, duration_fuck2, duration_fuck3, duration_flood1, duration_flood2, duration_flood3, link, key, prefix)
                        print("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("–ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –±–æ—Ç –≤ —á–∞—Ç–µ
                    cursor.execute("SELECT * FROM active_chats WHERE chat_id=?", (chat_id,))
                    active_chat_exists = cursor.fetchone()

                    if not active_chat_exists:
                        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        add_active_chat_to_db(cursor, conn, chat_id)
                        print("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        print("–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute("SELECT * FROM creators WHERE creator_id=? AND chat_id=?", (creator_id, chat_id))
                    creator_exists = cursor.fetchone()

                    if not creator_exists:
                        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                        add_creator_to_db(cursor, conn, creator_id, creator_username, chat_id, chat_name, language)
                        print("–°–æ–∑–¥–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("–°–æ–∑–¥–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if language == 'en':
                        bot.send_message(chat_id, 'Hi! Be active in chat and get a GRAND bonus for it!\n\n TESTING - POSSIBLE FAILURES')
                    else:
                        bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ –±–æ–Ω—É—Å GRAND!\n\n –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï - –í–û–ó–ú–û–ñ–ù–´ –°–ë–û–ò')
                else:
                    try:
                        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
                        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
                        cursor.execute("SELECT hi_text, earn, language FROM chats WHERE chat_id=?", (chat_id,))
                        hi_text_row = cursor.fetchone()
                        earn_row = cursor.fetchone()
                        language_row = cursor.fetchone()
                        user_mention = f'<a href="tg://user?id={member.id}">{member.first_name}</a>'
                        if hi_text_row:
                            welcome_message = f'{user_mention}, {hi_text_row[0]}'
                            bot.send_message(chat_id, welcome_message, parse_mode='HTML')
                        else:
                            if earn_row == "on_earn":
                                if language_row == "rus":
                                    welcome_message = f'{user_mention}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å GRAND!'
                                else:
                                    welcome_message = f'{user_mention}, Welcome! Be active and earn GRAND bonus!'
                                bot.send_message(chat_id, welcome_message, parse_mode='HTML')
                            else: 
                                if language_row == "rus":
                                    welcome_message = f'{user_mention}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
                                else:
                                    welcome_message = f'{user_mention}, Welcome!'
                                bot.send_message(chat_id, welcome_message, parse_mode='HTML')

                    except Exception as e:
                        error_message = (
                            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç:\n"
                            f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
                            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
                            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
                            f"‚Ä¢ Chat ID: {chat_id}\n"
                            f"‚Ä¢ Chat name: {chat_name}\n"
                            f"‚Ä¢ Creator ID: {creator_id}\n"
                            f"‚Ä¢ Creatorname: @{username}\n"
                            f"‚Ä¢ Message: {message}\n"
                            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
                        )
                        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                        logging.error(error_message)
            except Exception as e:
                error_message = (
                    f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç:\n"
                    f"‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {e}\n"
                    f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.__traceback__.tb_lineno}\n"
                    f"‚Ä¢ Chat ID: {chat_id}\n"
                    f"‚Ä¢ Chat name: {chat_name}\n"
                    f"‚Ä¢ Creator ID: {creator_id}\n"
                    f"‚Ä¢ Creatorname: @{username}\n"
                    f"‚Ä¢ Message: {message}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now()}"
                )
                # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                logging.error(error_message)
                
                bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @VadimBussS –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.") 

                    
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")


    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn:
            close_connection(conn) 



try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except (ConnectionError, ReadTimeout) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)